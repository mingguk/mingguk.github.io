<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingguk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingguk.github.io/"/>
  <updated>2019-01-29T08:20:29.648Z</updated>
  <id>http://mingguk.github.io/</id>
  
  <author>
    <name>minkuk Seo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webDev study plan</title>
    <link href="http://mingguk.github.io/2019/01/29/webDev-plan/"/>
    <id>http://mingguk.github.io/2019/01/29/webDev-plan/</id>
    <published>2019-01-29T13:28:27.000Z</published>
    <updated>2019-01-29T08:20:29.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="웹개발-공부-계획"><a href="#웹개발-공부-계획" class="headerlink" title="웹개발 공부 계획"></a>웹개발 공부 계획</h3><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p><img src="/images/nothing.png" alt=""></p><h3 id="References-위주로-큰-틀을-잡고-다른-소스들-참고"><a href="#References-위주로-큰-틀을-잡고-다른-소스들-참고" class="headerlink" title="References (위주로 큰 틀을 잡고 다른 소스들 참고)"></a>References (위주로 큰 틀을 잡고 다른 소스들 참고)</h3><ol><li><a href="https://medium.com/@Jbee_/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EB%A0%A4%EB%A9%B4-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%99%EC%8A%B5%ED%95%B4%EC%95%BC-%ED%95%98%EB%82%98%EC%9A%94-1dd59a14e084?fbclid=IwAR2Qwaifz8Lnn_aOF54zPrwdWxwYcI1qO8Xo4-N1uG-QEEaZRWQBbEcrH8Q" target="_blank" rel="noopener">프론트엔드 뭘 공부해야 하는가?</a><br></li><li><a href="https://medium.com/@codesquad_yoda/%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C-5ac7bb6ff2a9" target="_blank" rel="noopener">웹프론트엔드 개발자, 어떻게 준비?</a> <br></li><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">Developer roadmap</a> </li></ol><hr><p><strong>1. Javascript</strong></p><p>자바스크립트 동작원리</p><p>자바스크립트 문법, 주요개념</p><p>DOM</p><p>ES6</p><p>자바스크립트 생태계 (npm Web pack / bable)</p><p>CommonJS</p><p>OOP in Javascript / 함수형 프로그래밍</p><p>Type script</p><p>AJAX CORS</p><hr><p><strong>2. HTML / CSS</strong></p><p>grid</p><p>Midea query</p><p>CSS Framework (Bootsctrap 4</p><p>웹 접근성</p><hr><p><strong>3. library framework</strong></p><p>react</p><p>상태관리 라이브러리</p><p>react native</p><hr><p><strong>4. CS , Network, algorithm</strong></p><p>자료구조</p><p>알고리즘 (Udemy, daily toy, 면접대비)</p><hr><p><strong>5. Backend</strong></p><p>서버사이드 / 클라이언트 사이드 렌더링</p><p>node js</p><p>graphQL</p><p>MongoDB</p><hr><p><strong>6. Etc</strong></p><p>Github</p><p>Blogging</p><p>Terminal usage</p><p>Design patterns</p><p>English (업무수준 상회)</p><hr><h3 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h3><p>1월 &lt;기초&gt;&lt;숲 파악&gt;**</p><ol><li>런코 전과정 마스터(발췌,보충) , 테스트 준비, 통과 </li><li>udemy javascript weird parts 정리 (블로깅)</li><li>udemy web dev bootcamp 일부 (런코 관련)</li></ol><p>==&gt;  javascript 기본개념, 사용법 정리</p><p><strong>2월 &lt;프론트엔드&gt; <cs 기초=""></cs></strong></p><ol><li><p>자바스크립트 작동원리, 개념정리, codestates pre course 복습 (블로깅)</p></li><li><p>udemy web dev bootcamp 완강, udemy javascript build real app 완강  (js 로 웹 실제 조작, 구현 경험)</p></li><li><p>udemy algorithm in javascript (자료구조, 원리 이해, 직접 구현)<br>udemy network 이론강의 수강 , 컴원리 포함</p></li><li><p>생태계, javascript 관련 필수 이슈들</p></li><li><p>HTML / CSS (udemy Html/css 강의 / 미디어쿼리)</p></li></ol><p><strong>3월~4.11 &lt;풀스택 경험 + 백엔드 기초&gt; &lt;갈무리&gt;</strong></p><ol><li><p>라이브러리 (react , react native 기초 공부) - udemy / nomad react 기초강의들</p></li><li><p>nomad coder 풀스택 과정 1개 수료 (유튜브 or 우버 or  클론)</p></li><li><p>그동안 공부한 것 정리 (블로그 - TIL ,특수 주1회 / 깃헙) / 알고리즘 지속 공부</p></li></ol><p><strong>4월~ 수료까지 Codetates immersive course </strong><br>목표 : <strong>실력 있는 프론트엔드 개발자 &amp;&amp; 웹개발 커리어 시작 </strong></p><ul><li><p>지속 학습능력 (스스로 배우는 방법 터득, 체화)</p></li><li><p>커뮤니케이션, 협업 능력 (혼자 보다 함께, 더 크게)</p></li><li><p>기본기 갖추기 (cs, 네트워크 / 알고리즘 / 기반 작동원리 파악)</p></li><li><p>full-stack 설계 및 구현 경험  ( front 기반 + backend 기초 구축, 어플리케이션 전체)</p></li><li><p>Web + android + ios (react native)  / backend 통합 결과물 완성하기 </p></li><li><p>포트폴리오 및 브랜딩 ( 깃헙 / 블로그(개발공부, 포트폴리오 페이지 따로) )</p></li></ul><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;웹개발-공부-계획&quot;&gt;&lt;a href=&quot;#웹개발-공부-계획&quot; class=&quot;headerlink&quot; title=&quot;웹개발 공부 계획&quot;&gt;&lt;/a&gt;웹개발 공부 계획&lt;/h3&gt;&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
    
      <category term="plan" scheme="http://mingguk.github.io/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>Context &amp; Lexical Environments</title>
    <link href="http://mingguk.github.io/2019/01/29/ec-and-le/"/>
    <id>http://mingguk.github.io/2019/01/29/ec-and-le/</id>
    <published>2019-01-29T03:21:31.000Z</published>
    <updated>2019-01-30T04:00:04.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jswcc.png" alt=""></p><p>자바스크립트를 이해하는데 있어 중요한 기본개념 3가지</p><h3 id="Syntax-parsers"><a href="#Syntax-parsers" class="headerlink" title="Syntax parsers"></a>Syntax parsers</h3><p><img src="/images/jswSP.png" alt=""></p><p>작성한 코드를 컴퓨터가 이해 가능한 언어로 번역, 문법을 확인해주는 프로그램 </p><h3 id="Lexical-environments"><a href="#Lexical-environments" class="headerlink" title="Lexical environments"></a>Lexical environments</h3><p>프로그래밍 언어에서 lexical 이란 특정 단어나 문법과 연관이 있다는 의미로, 코드를 어느 <strong>위치</strong> 에 작성하느냐, 그 코드를 어떤것이 <strong>감싸고 있느냐</strong> 에 따라 전혀 다르게 작동한다는 의미</p><p><img src="/images/jswLexical.png" alt=""></p><p> 예를들어 위의 사진에서 변수 a는 hello 라는 함수 안에 위치하고 있기 때문에 hello() 내에서만 존재, 접근가능</p><h3 id="Execution-context"><a href="#Execution-context" class="headerlink" title="Execution context"></a>Execution context</h3><p><img src="/images/jswEC.png" alt=""></p><p> lexical environments 중에서 어떤 환경을 선택해서 실행되는지를 관리하는 Wrapper 이다.</p><h3 id="Excution-context-Global"><a href="#Excution-context-Global" class="headerlink" title="Excution context (Global)"></a>Excution context (Global)</h3><p>자바스크립트 코드를 실행하면 </p><ol><li>Excution context 생성</li><li>Global object(window), this 생성</li><li>Outer environment 생성</li><li>작성한 코드 실행</li></ol><p>순으로 진행된다. 자바스크립트에서 말하는 Global(전역)은 <strong>Not in a function, 특정 객체나 함수가 아님</strong> 을 의미한다 즉, 특정 객채(함수) 안에 <strong>(lexical evironmental)</strong> 존재하지 않는다는 의미</p><hr><h3 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(1)</span><br><span class="line">var a = &apos;Hello World&apos;;</span><br><span class="line">function b() &#123;</span><br><span class="line">    console.log(&apos;Called b&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line">console.log(a)</span><br><span class="line"></span><br><span class="line">// Called b</span><br><span class="line">// Hello World</span><br></pre></td></tr></table></figure><p>(1) 코드 실행결과를 예측하는 것은 쉬운 일이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(2)</span><br><span class="line">b();</span><br><span class="line">console.log(a)</span><br><span class="line"></span><br><span class="line">var a = &apos;Hello World&apos;;</span><br><span class="line"></span><br><span class="line">function b() &#123;</span><br><span class="line">    console.log(&apos;Called b&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//called b</span><br><span class="line">// undefined</span><br></pre></td></tr></table></figure><p>하지만 (2)는? 변수 a 는 undefined, 함수 b는 정상적으로 출력이 됐다.</p><p>이러한 현상을 호이스팅(Hoisting)이라고 한다. 몇몇 설명에서는 마치 코드를 물리적으로 최상단으로 이동시킨 다는 식인데 이는 오해의 소지가 있다.</p><p>excution context는 두 단계가 있다 <strong>Creation phase</strong> 와 <strong>Excution phase</strong></p><p><strong>Creation phase</strong></p><p>Execution context 가 생성되면 동시에 global object, this, outer environment를 생성하고 변수와 함수 저장을 위해 메모리공간을 먼저 할당한다. 이때 모든 변수는 먼저 <strong>undefined</strong> 로 할당되고 함수는 의도대로 할당되는데 이 과정을 <strong>Hoisting</strong> 이라고 한다.</p><p><strong>Execution phase</strong></p><p>이 모든 작업 이후 코드가 한줄 한줄 순서대로 실행 되면서 의도한 값들이 해당 변수에 할당 됨.</p><hr><h3 id="Function-invokation"><a href="#Function-invokation" class="headerlink" title="Function invokation"></a>Function invokation</h3><p>자바스크립트에서 함수를 호출하면 어떤 일이 벌어질까?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function b() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><ol><li><p>Global Execution Context , Global Object, this 생성</p></li><li><p>메모리에 함수 a 와 b 를 위한 공간 셋업</p></li><li><p>한줄 한줄 실행하다 함수호출 a() 를 만나면</p></li><li><p>a() 를 위한 새로운 Execution context 를 생성후  Execution Stack 에 삽입</p></li><li><p>a() 함수 내부 로직을 실행한다 (in Execution context of a() )</p></li><li><p>그러다 새로운 함수 호출 b() 를 만나면, b()를 위한 새로운 Execution contex를 생성, 같은 과정 반복</p></li><li><p>각 함수 실행이 끝나는 순서대로 Execution stack 에서 빼내는 순으로 작동이 종료된다</p><p><img src="/images/jswFC.png" alt=""></p></li></ol><p><strong>즉, 함수가 호출되어 실행 될 때마다 새로운 execution context가 생성되고, Execution stack 에 삽입, 함수 내부로직을 실행한 뒤에는 Execution stack 에서 빠지고 해당 Execution context 도 사라진다. 그 다음 해당 함수 호출 이후의 코드들이 순차적으로 실행되는 식으로 작동한다</strong>.</p><p>다음 코드의 실행순서를 살펴보면, </p><p><img src="/images/jswFE.png" alt=""></p><p>a() 호출 (컨텍스트 생성, 스택 삽입) -&gt; b() 호출 (컨텍스트 생성, 스택 삽입) -&gt; var d -&gt; b() out -&gt; var c -&gt; a() out -&gt; var d </p><p>순으로 진행 될 것이다.</p><hr><h3 id="Variable-Environment"><a href="#Variable-Environment" class="headerlink" title="Variable Environment"></a>Variable Environment</h3><p><img src="/images/jswVE.png" alt=""></p><p>각 함수가 호출될때마다 새로운 Execution context 가 추가되고, 변수 myVar는 각각의 Execution context 내에 <strong>독립적으로 존재,  각기 다른 메모리공간에 할당된다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function b() &#123;</span><br><span class="line">    var myVar;</span><br><span class="line">    console.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line">function a() &#123;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    console.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myVar = 1;</span><br><span class="line">console.log(myVar);</span><br><span class="line">a();</span><br><span class="line">console.log(myVar);</span><br><span class="line"></span><br><span class="line">//1</span><br><span class="line">//2</span><br><span class="line">//undefined</span><br><span class="line">//1</span><br></pre></td></tr></table></figure><p>변수는 결국 어떤 Execution context 내의 variable environment 속해있는가 에 따라 결정되고 이는 곧 <strong>스코프(scope)</strong> 개념으로 연결된다.</p><hr><h3 id="Scope-Chain"><a href="#Scope-Chain" class="headerlink" title="Scope Chain"></a>Scope Chain</h3><p>함수가 호출될 때 자바스크립트 엔진은 해당 함수가 <strong>‘’어디”</strong> 에 작성됐는지를 기반으로 해당 Execution context의 outer environment 에 대한 reference 를 생성한다. 자기가 속한 Execution context 에서 해당 변수를 찾지 못했다면, outer environment reference 가 가르키는 Execution context 에서 다시 해당 변수를 검색하고.. 그 끝은 결국 전역, Globla Execution context 까지 이른다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function b() &#123;</span><br><span class="line">    console.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line">function a() &#123;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myVar = 1;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line">//1</span><br></pre></td></tr></table></figure><p>b() Execution context 에는 변수 myVar 존재x. 따라서 outer environment 인// Global Execution context 에서 myVar=1 확인, =&gt; console.log(myVar) ==&gt; 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line">    function b() &#123;</span><br><span class="line">    console.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var myVar = 1;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>위의 코드의 경우 Outer environment 는   b() ==&gt; a() ==&gt; Global execution 순으로 Scope chain 이 결정 될 것이다.</p><p><img src="/images/jswSC.png" alt=""></p><p><strong>따라서 해당 함수가 어느 Execution context에 정의 되었는지 확인하면 </strong>(코드 내 어디에서 선언되었는지) <strong>scope chain을 확인 할 수있다</strong>.</p><hr><h3 id="Asynchronous-Callback"><a href="#Asynchronous-Callback" class="headerlink" title="Asynchronous Callback"></a>Asynchronous Callback</h3><p><strong>자바스크립트는 동기식</strong> (한번에 하나의 작업처리 순서대로).</p><p>동시에 여러개 처리? x 자바스크립트는 코드 한줄 한줄 순서대로 실행!</p><p><img src="/images/jswAsync.png" alt=""></p><p>자바스크립트 엔진에는 Execution stack 외에  여러 이벤트들을 담는 <strong>Event queue</strong> 가 존재한다.</p><p>자바스크립트 엔진은 Evenet queue 를 계속 주시하고 있고, Execution stack이 빈상태가 됐을 때 (순차적으로 실행할 함수들이 다 실행되고 나면) , queue에 있는 이벤트가 발동되면 해당 이벤트의 콜백함수 ( ex) click , clickHandler() ) 를 Execution stack 으로 삽입시켜 함수를 실행하게 한다.</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 3초가 지나면 종료되는 함수</span><br><span class="line">function waitThreeSeconds() &#123;</span><br><span class="line">    var ms = 3000 + new Date().getTime();</span><br><span class="line">    while (new Date() &lt; ms) &#123;&#125;</span><br><span class="line">        console.log(&apos;finished function&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function clickHandler() &#123;</span><br><span class="line">    console.log(&apos;click event!&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 웹페이지 아무대나 클릭하면 발동되도록 리스너 추가</span><br><span class="line">document.addEventListener(&apos;click&apos;, clickHandler);</span><br><span class="line"></span><br><span class="line">waitThreeSeconds();</span><br><span class="line">console.log(&apos;finished execution&apos;);</span><br><span class="line"></span><br><span class="line">//3초 이전에 클릭이벤트를 발생시켜도 결과는 아래와 같다</span><br><span class="line">//finished function</span><br><span class="line">//finished execution</span><br><span class="line">//click event!</span><br></pre></td></tr></table></figure><p>위의 코드실행 결과가 왜 저 순서대로 나오는지 이해가 되는가?</p><p>waitThreeSeconds() 는 3초가 지나면 실행을 종료한다 ( Execution context 사라짐) -&gt; 한줄한줄 코드를 실행하다 끝에 다다른다 (Global Execution context 사라짐) -&gt; Execution stack 빔 -&gt; 그때서야 event queue 확인 -&gt; 해당 event handler() 실행</p><p>즉, 자바스크립트 엔진은 Execution stack 이 비워지기 전까지 event queue를 처리하지 않다가 <strong>스택이 비게되면(코드를 순차적으로 다 실행하고 나서야) event queue 내에 준비된 evnet를 처리한다</strong>.</p><p>이것이 자바스크립트가 <strong>동기식으로 비동기식 작업을 처리하는 방식</strong>이다.</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jswcc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트를 이해하는데 있어 중요한 기본개념 3가지&lt;/p&gt;
&lt;h3 id=&quot;Syntax-parsers&quot;&gt;&lt;a href=&quot;#Syntax-parsers&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>&lt;Udemy&gt; Javascript weird parts 시작하기</title>
    <link href="http://mingguk.github.io/2019/01/29/post-jsWeird1/"/>
    <id>http://mingguk.github.io/2019/01/29/post-jsWeird1/</id>
    <published>2019-01-29T02:15:51.000Z</published>
    <updated>2019-01-29T07:48:30.791Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jswUnderstand.png" alt=""> </p><p>자바스크립트 개념정리를 위해 이러저리 자료를 찾던중 발견한 보석같은 강의 (feat. 연쇄할인마) </p><p>단순 문법이나 기초 예제 복기가 아닌 이면에 자바스크립트가 어떻게 동작하는지 그 원리를(weird parts) 이해하는 것을 목표로 하고 있다. 굳이 왜 작동원리까지..? 라고 생각 할 수 있겠지만 <strong>원리에 대한 이해</strong>를 바탕으로 더 나은 코드를 작성할 수 있다는 주장이다.</p><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;Hello World&apos;);   //Hello World</span><br></pre></td></tr></table></figure><p>예를들어 Hello world 를 출력하기 위한 이 간단한 코드 이면에, 이를 실행하기 위해 자바스크립트엔진이 어떻게 동작하여 브라우저를 통해 화면에 글자를 출력하게 되는지 같은.. </p><p>사실 codestates pre 과정에서 처음하는 javascript임에도 큰 혼란을 겪지않았던건  먼저 이 강의를 수강하고 간 덕분인것 같다. </p><p><img src="/images/jswLibraries.png" alt=""></p><p>프론트엔드 개발에 흔히 쓰이는 프레임워크, 라이브러리들도 결국 자바스크립트 코드일뿐 이라는 것,                    프론트엔드 개발을 잘하고 싶다, 코드 퀄리티를 높히고 싶다면? 결국 모든것의 기반이 되는 자바스크립트를 깊게 파고 공부하는 것이 최선의 방법</p><p>pre course 공부한 내용이랑 자바스크립트 개념 정리를 위해서 시리즈로 블로그에 정리 포스팅을 연재 할 계획이다 그다음은 오래전 결제하고 조금보다 방치한 <a href="https://www.udemy.com/the-web-developer-bootcamp/" target="_blank" rel="noopener">web bootcamp</a> 랑 <a href="https://www.udemy.com/the-complete-javascript-course/" target="_blank" rel="noopener">javascript real projects</a> 를 완강하고..</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/29/ec-and-le/">JSW context &amp; scope</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jswUnderstand.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;자바스크립트 개념정리를 위해 이러저리 자료를 찾던중 발견한 보석같은 강의 (feat. 연쇄할인마) &lt;/p&gt;
&lt;p&gt;단순 문법이나 기초 예제 복기가 아닌 
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weird" scheme="http://mingguk.github.io/tags/weird/"/>
    
  </entry>
  
  <entry>
    <title>back</title>
    <link href="http://mingguk.github.io/2019/01/29/back/"/>
    <id>http://mingguk.github.io/2019/01/29/back/</id>
    <published>2019-01-28T16:22:52.000Z</published>
    <updated>2019-01-28T08:00:41.792Z</updated>
    
    <content type="html"><![CDATA[<p>백엔드 카테고리</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;백엔드 카테고리&lt;/p&gt;
&lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related-Posts&quot; class=&quot;headerlink&quot; title=&quot;Related Posts&quot;&gt;&lt;/a&gt;Related Posts&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Back" scheme="http://mingguk.github.io/categories/Back/"/>
    
    
      <category term="back" scheme="http://mingguk.github.io/tags/back/"/>
    
  </entry>
  
  <entry>
    <title>review</title>
    <link href="http://mingguk.github.io/2019/01/29/review/"/>
    <id>http://mingguk.github.io/2019/01/29/review/</id>
    <published>2019-01-28T16:11:57.000Z</published>
    <updated>2019-01-29T08:06:07.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="안녕하세요"><a href="#안녕하세요" class="headerlink" title="안녕하세요"></a>안녕하세요</h3><p>주로 온라인 강의 나 부트캠프로 공부를 많이 해왔기 때문에 (영어 자료 위주)</p><p>필요한 인강의나 강의 선택 시 제 경험이 작은 도움이 됏으면 합니다</p><p>주로 강의를 듣는 사이트</p><ol><li>Udemy </li><li>Udacity</li><li>인프런</li><li>칸아카데미, 코드리뷰</li></ol><h3 id="Related-post"><a href="#Related-post" class="headerlink" title="Related post"></a>Related post</h3><p><a href="http://mingguk.github.io/2019/01/28/codestates/">코드스테이츠 pre course 후기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;안녕하세요&quot;&gt;&lt;a href=&quot;#안녕하세요&quot; class=&quot;headerlink&quot; title=&quot;안녕하세요&quot;&gt;&lt;/a&gt;안녕하세요&lt;/h3&gt;&lt;p&gt;주로 온라인 강의 나 부트캠프로 공부를 많이 해왔기 때문에 (영어 자료 위주)&lt;/p&gt;
&lt;p&gt;필요한 인강의
      
    
    </summary>
    
      <category term="Review" scheme="http://mingguk.github.io/categories/Review/"/>
    
    
      <category term="review" scheme="http://mingguk.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>코드스테이츠 pre course 후기</title>
    <link href="http://mingguk.github.io/2019/01/28/codestates/"/>
    <id>http://mingguk.github.io/2019/01/28/codestates/</id>
    <published>2019-01-27T21:48:43.000Z</published>
    <updated>2019-01-29T08:08:12.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="아재-비전공-수포자-프로그래밍-도전기"><a href="#아재-비전공-수포자-프로그래밍-도전기" class="headerlink" title="아재, 비전공, 수포자 프로그래밍 도전기"></a>아재, 비전공, 수포자 프로그래밍 도전기</h2><p><img src="/images/nothing.png" alt=""></p><p><strong>3관 타이틀로 과연 개발자가 될 수 있을까?</strong><br>우연히 관심갖게 된 코딩, 온라인강의나 독학을 전전하며 큰 성과없이 있다, 문득 더 늦기 전에 도전해봐야겠다는 생각에 시작한 code states pre course, 시작한지 어느덧 벌써 한달이 지나갔다.<br>지난 한달간 대부분의 시간과 노력을 투자 했음에도 시작 단계라고 만만히 봤던 pre course는 생각보다 훨씬 <strong>‘빡세고’</strong> ,<strong>‘외로운’</strong> 과정이었다</p><h3 id="티칭-이-아니라-‘코칭-’"><a href="#티칭-이-아니라-‘코칭-’" class="headerlink" title="티칭 이 아니라 ‘코칭?’"></a>티칭 이 아니라 ‘코칭?’</h3><p><img src="/images/coaching.jpeg" alt=""></p><p>솔직히 처음엔 코드스테이츠 측에서 딱히 가르쳐 주는 거 없이 너무 날로(?)  하는거 아닌가라는 불만도 있었다 수업이나 강의를 통해 지식을 전달 받고, pair programming 을 통해 거 의견을 공유하면서 같이 코딩을 하는 시간도 있었다 하지만. 대부분은 부여받은 과제를 해결하기 위해 홀로 이리저리 머리를 짜내고 시도하고, 필요한 부분들을 검색해서 다른 방식으로 접근해보는 식의 연속이었다</p><p>시작할때는 뭘 하라는건지 감조차 못잡던 문제들을 직접 부딪혀쳐가며 하나하나 해결해 나가는 과정속에서 나도 모르게 sudo code를 끄적거리고, 내가 생각한 기능을 지원하는 메소드가 있는지 , 이걸 해결하기 위해 내가 모르는게 뭔지, 뭘 공부해야 되는지 검색하고  다시 시도해보는 식의 습관이 자리잡은 것 같다 해결한 과제가 하나 둘 쌓여 갈수록 점점 <strong>코드 스테이츠의 방식에 대한 확신이 강해졌다</strong>  </p><h3 id="결국-문제해결능력"><a href="#결국-문제해결능력" class="headerlink" title="결국 문제해결능력"></a>결국 문제해결능력</h3><p> <img src="/images/ps.jpg" alt=""><br>아직 잘 모르지만, 지인들이나 회사에서 간접적으로 경험했던 개발자들의 모습, 그리고 pre course 를 진행하면서 느낀 것들을 종합해 보자면 결국 개발자의 실력이란 현장에서 직면하는 문제들을 이미 알고 있는 지식으로, 혹은 모르지만 필요한 것들을 빠르게 습득, 적용하여 <strong>효율적으로 문제를 해결하는 것</strong>  아닐까? 한가지 덧붙이자면 상용 어플리케이션의 규모상 혼자가 아닌 <strong>‘함께 문제를 잘 해결 해내는 능력’</strong> 까지  </p><h3 id="‘코칭’-측면에서-codestates-의-가치"><a href="#‘코칭’-측면에서-codestates-의-가치" class="headerlink" title="‘코칭’ 측면에서 codestates 의 가치?"></a>‘코칭’ 측면에서 codestates 의 가치?</h3><p><img src="/images/codestates.png" alt=""></p><p>나는 무엇인가를 배울 때 가장 중요한 것은 <strong>‘내가 뭘 모르는지 정확히 아는것’</strong> 이라고 생각한다 거기서 명확한 계획과 전략이 나오고 노력이 뒷받침 된다면 성공 할 수 있다고 믿는다 비싼 돈 들여 원어민 강사있는 학원에 가도 영어를 유창하게 배울 확률은 매우 낮다 그 원어민 강사들을 당신이 영어의 어떤 부분을 모르고 부족해서 영어가 안되는지 알지 못한다 (혹은 돈이 안되기 때문에 알면서 외면하거나)</p><p><strong>코칭은 대상의 현재 상태와 목표간의 괴리를 객관적으로 파악하고 목표달성을 위한 명확한 방향과 방법을 제시, 서포팅 하는 역할</strong>이다  질의응답이나, pre course 러닝코드 프로그램을 진행하면서 코드스테이츠는 수강생들이 뭘 모르고 어려워하는지, 어떤식으로 도와줘야 되는지 잘 안다는 느낌을 받았다<br>아마 과정을 설계한 엔지니어와 직원들 중 다수가 이전에 codestates 과정들을 이수했기 때문이라고 생각된다</p><p>나 포함 비전공, 생에 첫 코딩, 무관심자들을 진짜 제대로된 개발자로 만들어내기 위해 코드스테이츠가 제시하는 솔루션은  결국 개발자의 본질, <strong>‘문제해결능력’을 키울 수 있도록 잘 유도하는 하는 것</strong> 같다  </p><p>잘 짜여진 시스템과 단계별로 적당히 도전적 난이도로 설계된 과제들로 이끌어 주고, 개발에 집중 할 수 있는 환경조성, 질의응답, 서포트 역할 등..개인적으로 기대 이상 이었고 충분히 만족스러웠다 이러한 강점들은 정해진 가이드라인이 있는 pre course 보다           <strong>각자 프로젝트를 기획, 설계부터 구현까지 스스로 해내야 하는 immersive course</strong> 에서 더   빛을 발하지 않을까 생각된다 </p><p>pre course를 잘 마무리하고 다음 과정인 immersive course 을 통해 제대로 된 개발자로의 커리어 전환에 진지하게 도전해 볼 생각이다</p><p>그동안 주입식, 강의식에 질리고 만족스러운 결과를 얻지 못했다면, 개발을 어떻게 배워야되는지 감을 잡지 못했다면 <strong>codestates</strong> 를 추천하고 싶다<br>물론 <strong>훨씬 고된길</strong>이 되겠지만..</p><h3 id="기타사항들"><a href="#기타사항들" class="headerlink" title="기타사항들"></a>기타사항들</h3><ol><li>학습 환경이 좋다. 성수 패스트파이브 건물 6층 전체, 나머지 층 공유하는거 같은데 오프라인 수강이면 자습환경도 제공한다 (편한자리, 모니터 지원, 5층 카페테리아 공간에서 커피, 음료, <strong>에일맥주</strong> 무료 제공)</li><li>코딩 외에 다른 지원에도 신경 많이 쓰는거 같다 (면접,이력서,협상 등 커리어 관련 / 수강료 부담 관련 we-win제도 / 생활관련 / 학습환경 조성 등 )</li><li>빠른 피드백(온라인 채널)</li><li><del>최애 성수족발이랑 가깝다..</del></li></ol><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="https://www.codestates.com/" target="_blank" rel="noopener">https://www.codestates.com/</a></p><p><a href="https://mingguk.github.io">https://mingguk.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;아재-비전공-수포자-프로그래밍-도전기&quot;&gt;&lt;a href=&quot;#아재-비전공-수포자-프로그래밍-도전기&quot; class=&quot;headerlink&quot; title=&quot;아재, 비전공, 수포자 프로그래밍 도전기&quot;&gt;&lt;/a&gt;아재, 비전공, 수포자 프로그래밍 도전기&lt;/
      
    
    </summary>
    
      <category term="Review" scheme="http://mingguk.github.io/categories/Review/"/>
    
      <category term="Bootcamp" scheme="http://mingguk.github.io/categories/Review/Bootcamp/"/>
    
    
      <category term="codestates" scheme="http://mingguk.github.io/tags/codestates/"/>
    
      <category term="코드스테이츠" scheme="http://mingguk.github.io/tags/%EC%BD%94%EB%93%9C%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%B8%A0/"/>
    
  </entry>
  
  <entry>
    <title>third post</title>
    <link href="http://mingguk.github.io/2019/01/28/third-post/"/>
    <id>http://mingguk.github.io/2019/01/28/third-post/</id>
    <published>2019-01-27T21:29:17.000Z</published>
    <updated>2019-01-29T08:04:01.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html-css-도-해야제"><a href="#html-css-도-해야제" class="headerlink" title="html css 도 해야제"></a>html css 도 해야제</h3><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>카테고리 나누는거 왜케 어렵니..</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;html-css-도-해야제&quot;&gt;&lt;a href=&quot;#html-css-도-해야제&quot; class=&quot;headerlink&quot; title=&quot;html css 도 해야제&quot;&gt;&lt;/a&gt;html css 도 해야제&lt;/h3&gt;&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; cla
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="html css" scheme="http://mingguk.github.io/categories/Front/html-css/"/>
    
    
      <category term="html" scheme="http://mingguk.github.io/tags/html/"/>
    
      <category term="css" scheme="http://mingguk.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>first post</title>
    <link href="http://mingguk.github.io/2019/01/28/first-post/"/>
    <id>http://mingguk.github.io/2019/01/28/first-post/</id>
    <published>2019-01-27T21:20:23.000Z</published>
    <updated>2019-01-28T09:08:10.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="처음이라니"><a href="#처음이라니" class="headerlink" title="처음이라니"></a>처음이라니</h3><p>헥소 블로그 세팅 헬..</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/28/second-post/">Javascript 시리즈 2: 자바스크립트 엔진</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;처음이라니&quot;&gt;&lt;a href=&quot;#처음이라니&quot; class=&quot;headerlink&quot; title=&quot;처음이라니&quot;&gt;&lt;/a&gt;처음이라니&lt;/h3&gt;&lt;p&gt;헥소 블로그 세팅 헬..&lt;/p&gt;
&lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>second post</title>
    <link href="http://mingguk.github.io/2019/01/28/second-post/"/>
    <id>http://mingguk.github.io/2019/01/28/second-post/</id>
    <published>2019-01-27T21:20:23.000Z</published>
    <updated>2019-01-29T08:04:31.106Z</updated>
    
    <content type="html"><![CDATA[<h3 id="카테고리-나누는게"><a href="#카테고리-나누는게" class="headerlink" title="카테고리 나누는게"></a>카테고리 나누는게</h3><p>이렇게 힘들다니..</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/28/first-post/">Javascript 시리즈 1: 시작하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;카테고리-나누는게&quot;&gt;&lt;a href=&quot;#카테고리-나누는게&quot; class=&quot;headerlink&quot; title=&quot;카테고리 나누는게&quot;&gt;&lt;/a&gt;카테고리 나누는게&lt;/h3&gt;&lt;p&gt;이렇게 힘들다니..&lt;/p&gt;
&lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
