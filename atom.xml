<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingguk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mingguk.github.io/"/>
  <updated>2019-03-21T07:28:37.031Z</updated>
  <id>http://mingguk.github.io/</id>
  
  <author>
    <name>minkuk Seo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How CSS Works</title>
    <link href="http://mingguk.github.io/2019/03/21/til0319/"/>
    <id>http://mingguk.github.io/2019/03/21/til0319/</id>
    <published>2019-03-20T20:17:05.000Z</published>
    <updated>2019-03-21T07:28:37.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><h3 id="How-to-bulid-a-good-website"><a href="#How-to-bulid-a-good-website" class="headerlink" title="How to bulid a good website"></a>How to bulid a good website</h3><p><img src="/images/css.png" alt=""></p><p><strong>반응형 웹</strong></p><p>다양한 기기들의 다른 스크린 사이즈에 각각 최적화 된 화면을 보여주는 것</p><p><strong>유지보수, 확장 가능한 코드</strong></p><p>깔끔하고 누구나 알아보기 쉽게 잘 설계, 조직화 된 코드를 짜야된다. 웹 어플리케이션이 성장함에 따라 자연스럽게 코드 양이 늘어나거나 문제 발생 시 잘 설계된 코드는 시간과 비용을 현저히 줄여준다.</p><p><strong>성능</strong></p><p>웹사이트 성능 저하를 피하기 위해 가능한 적은 요청과, 코드, 이미지를 효율적으로 조정하는게 필요하다.</p><hr><h3 id="What-happens-to-css-when-we-load-up-a-webpage"><a href="#What-happens-to-css-when-we-load-up-a-webpage" class="headerlink" title="What happens to css when we load up a webpage?"></a>What happens to css when we load up a webpage?</h3><p><img src="/images/webpage.png" alt=""></p><ol><li><p>브라우저가 HTML 파일 로드</p></li><li><p>HTML 의 코드를 한줄 한줄 해독</p></li><li><p>해독 과정에서 코드를 DOM 구조로 빌드</p></li><li><p>CSS 파일 또한 로드</p></li><li><p>CSS 파일을 한줄씩 해독 </p><p>5-1. CSS Cascade (충돌하는 css 선언 조정)</p><p>5-2. CSS 최종 속성값 결정</p></li><li><p>CSSOM  빌드 (Like DOM)</p></li><li>DOM + CSSOM -&gt; 최종 tree 구조 빌드</li><li>VIsual Formatting Model </li><li>Website rendering (실제 브라우저 통해 보여지는 단계)</li></ol><hr><p><strong>단계별 정리</strong></p><h3 id="How-CSS-is-parsed"><a href="#How-CSS-is-parsed" class="headerlink" title="How CSS is parsed?"></a>How CSS is parsed?</h3><ol><li><strong>Cascading and Specificity</strong></li></ol><p><img src="/images/cascade.png" alt=""></p><p><strong>CASCADE?</strong></p><p>특정 요소에 한 가지 이상의 속성 값이 지정됐을 때 최종적으로 어떤 속성값을 적용할 것인지 조정하고 결정하는 단계</p><p>(Author 지정 값 / css, style 에 유저 직접 지정 값 / 브라우저 자체 기본속성값 등.. 중에서 <strong>어느 속성을 최종 적용 할 것인가!?</strong> 의 문제)</p><p><strong>Importance —&gt; specificity —&gt; source order  순으로 비교, 요소에 적용 될 속성값  최종 결정</strong></p><p><strong>1) importance</strong></p><p><img src="/images/importance.png" alt=""></p><p>(!important 키워드 포함된 blue 로 최종 결정!)</p><p><strong>2) specificity ( 어느 것이 더 세부적, 구체적인가?)</strong></p><p><img src="/images/specific.png" alt=""></p><p><strong>3) source Order (importance, specificity 가 같다면 가장 나중에 쓰여진 속성 적용)**</strong></p><p><img src="/images/sourceorder.png" alt=""></p><p><strong>참고사항</strong></p><p><img src="/images/cssetc.png" alt=""></p><ol start="2"><li><strong>Value Processing</strong></li></ol><p><img src="/images/cssvalueprocessed.png" alt=""></p><p><strong>CSS 적용 할 최종 속성값을 산출하는 과정</strong></p><ol><li>Declared value (선언된 값) —&gt; </li><li>Cascaded value( 속성 값 두가지 이상 일 때, 어느걸 적용 할까~? —&gt;</li><li>Specified value (속성 값 하나 일 때) —&gt;</li><li>Computed value (상대적인 값들 -&gt; 절대값(px로 변환 됨) —&gt;</li><li>Used value (레이아웃 따라 값 산출 부모, % 라던지..) —&gt;</li><li>Actual value (브라우저 나 디바이스 기본설정 따라 최종 값 산출)</li></ol><p><strong>relative —&gt; absolute value (px)</strong></p><p><img src="/images/reltoabs.png" alt=""></p><p>font-size : 부모의 font-size 기준</p><p>length: 부모의 width 기준</p><p><strong>Font-based</strong> : em(font) : 부모 / em(length)(현재 요소 크기)  / rem (root 기준)</p><p><strong>Viewport-based</strong> : vh(height) / vw(width)</p><p>3.<strong>inheritance</strong></p><p><img src="/images/inheritance.png" alt=""></p><p>요소에 지정된 css value가 없다면 부모에게서 상속 될 수 있는 요소가 있는지 확인 하고 부모의 computed value를 상속받아 적용한다.</p><hr><h3 id="How-CSS-render-a-website-Visual-Formatting-Model"><a href="#How-CSS-render-a-website-Visual-Formatting-Model" class="headerlink" title="How CSS render a website? (Visual Formatting Model)"></a>How CSS render a website? (Visual Formatting Model)</h3><p><img src="/images/vfm.png" alt=""></p><p>웹사이트 레이아웃은 각각의 <strong>컴포넌트(내용)들을 담은 박스들의 합이다.</strong></p><p>이 박스들을 구상한 레이아웃에 따라 조화롭게 배치해야한다.</p><p><strong>1) Box Model</strong></p><p><img src="/images/boxmodel.png" alt=""></p><p><strong>2) Box Types</strong></p><p><img src="/images/boxtypes.png" alt=""></p><p><strong>3) Positioning Schemes</strong></p><p><img src="/images/positioning.png" alt=""></p><p><strong>4) Stacking Contexts</strong></p><p><img src="/images/stacking.png" alt=""></p><p>중첩, 레이어 개념 어느것을 최상위로 보여 줄 것인지</p><hr><h3 id="How-to-build-good-CSS-architecture"><a href="#How-to-build-good-CSS-architecture" class="headerlink" title="How to build good CSS architecture?"></a>How to build good CSS architecture?</h3><p><img src="/images/cssmindset.png" alt=""></p><p>효율적으로 CSS 를 3단계로 나눠서 구현하는 방식</p><p>1) <strong>설계</strong></p><p><img src="/images/think.png" alt=""></p><p>컴포넌트 단위 베이스, 어디서나 재사용 가능하고 독립적으로 작성 할 것</p><p><strong>2) 구현 (의미있는 네이밍, 조직화 된 classes, ids)</strong></p><p><img src="/images/build.png" alt=""></p><p><strong>BEM </strong></p><p>block 홀로 의미를 갖는 컴포넌트 단위</p><p> block—element   특정 블록 내에서만 의미 갖는 컴포넌트 </p><p> modifier (기본형에서 변형된, 한번만 사용되는)</p><p><strong>3) 폴더별 관리 (Sass)</strong></p><p><img src="/images/architecture.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related-Posts&quot; class=&quot;headerlink&quot; title=&quot;Related Posts&quot;&gt;&lt;/a&gt;Related Posts&lt;/h3&gt;&lt;h3 id=&quot;How-to-bulid-a-good-w
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="html css" scheme="http://mingguk.github.io/categories/Front/html-css/"/>
    
    
      <category term="css" scheme="http://mingguk.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>til0306</title>
    <link href="http://mingguk.github.io/2019/03/07/til0308/"/>
    <id>http://mingguk.github.io/2019/03/07/til0308/</id>
    <published>2019-03-06T19:36:12.000Z</published>
    <updated>2019-03-14T04:46:59.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/til.jpg" alt=""></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li>section 7 (flexbox 반응형웹 복기, 직접 만들고 정리)</li><li>udemy modern html&amp;css section 8,9,10 수강</li><li>underbar advanced 전까지 다시 풀기</li><li>til 포스팅</li></ol><p>주말까지</p><ol><li>udemy modern html &amp; css 완강, 정리하기 </li><li>js 알고리즘 선별, 준비 ( 매일 3문제 / 정리 블로깅 / udemy js algorithms)</li></ol><p>담주부터</p><p>udemy brad js 코스 </p><p>brad css 복기 정리 / 2번째 css코스 시작</p><p>js algoritms 하루 한강 수강~!? (혹은 다른 것)</p><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><p>udemy web dev full-stack 수강 하고 웹개발 전체 큰 그림 파악 완료</p><p>front-end 쪽에 집중해서 배우고 빠르게 프론트엔드 쪽 포트폴리오 및 블로깅 진행해야겠다</p><p>css media query 첨써봤는데 정말 편리하다. 더 이상 float 에서 고통받지 않아도 되..</p><p>반응형웹 기초들 따라 만들어 보고 있는데 꽤 흥미가 간다. 완성 후 혼자 다시 복기 철저히 해서 체화 필요</p><p>brad trasversy 의 유데미 강의들을 통째 결제 했는데.. 역시 믿고보는 빵형..</p><p>간만에 알고리즘 문제들 풀었더니 역시나 감이 좀 떨어진거같다. 매일 지속적으로 조금씩 병행해야겠다</p><p>javascript reduce, map , filter, forEach 등 매번 쓸 때마다 헷갈리는거 같다. 조만간한 한 번 용례랑 쭉 정리해서 포스팅을 하</p><p>면서 정리해야겠다. underscore.js 를 제대로 다시 해보는 것도 고려</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/til.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;section 7 (fle
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
      <category term="til" scheme="http://mingguk.github.io/categories/post/til/"/>
    
    
      <category term="til" scheme="http://mingguk.github.io/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>til0306</title>
    <link href="http://mingguk.github.io/2019/03/07/til0306/"/>
    <id>http://mingguk.github.io/2019/03/07/til0306/</id>
    <published>2019-03-06T19:36:12.000Z</published>
    <updated>2019-03-07T11:46:55.755Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/til.jpg" alt=""></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li><p>udemy modern html&amp;css 섹션 5~7 수강</p></li><li><p>responsive webpage 완성 toddler project</p><iframe width="560" height="315" src="https://www.youtube.com/embed/n57DUEJpOoM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><p>codestates SA-2 완성, 풀리퀘</p></li><li><p>til 블로깅</p></li></ol><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><p>udemy web dev full-stack 수강 하고 웹개발 전체 큰 그림 파악 완료</p><p>front-end 쪽에 집중해서 배우고 빠르게 프론트엔드 쪽 포트폴리오 및 블로깅 진행해야겠다</p><p>css media query 첨써봤는데 정말 편리하다. 더 이상 float 에서 고통받지 않아도 되..</p><p>반응형웹 기초들 따라 만들어 보고 있는데 꽤 흥미가 간다. 완성 후 혼자 다시 복기 철저히 해서 체화 필요</p><p>brad trasversy 의 유데미 강의들을 통째 결제 했는데.. 역시 믿고보는 빵형..</p><p>간만에 알고리즘 문제들 풀었더니 역시나 감이 좀 떨어진거같다. 매일 지속적으로 조금씩 병행해야겠다</p><p>javascript reduce, map , filter, forEach 등 매번 쓸 때마다 헷갈리는거 같다. 조만간한 한 번 용례랑 쭉 정리해서 포스팅을 하</p><p>면서 정리해야겠다. underscore.js 를 제대로 다시 해보는 것도 고려</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/til.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;udemy moder
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
      <category term="til" scheme="http://mingguk.github.io/categories/post/til/"/>
    
    
      <category term="til" scheme="http://mingguk.github.io/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>til</title>
    <link href="http://mingguk.github.io/2019/02/26/til3/"/>
    <id>http://mingguk.github.io/2019/02/26/til3/</id>
    <published>2019-02-25T17:10:18.000Z</published>
    <updated>2019-02-27T15:11:46.819Z</updated>
    
    <content type="html"><![CDATA[<p>하하하</p><p><img src="/images/til.jpg" alt=""></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li>web dev Restful 까지 수강</li><li>code signal 3 문제 풀이</li><li>Build real js app section 7 1/2 파트 수강</li><li>jobjobjs 수강신청, 준비</li><li>til 포스팅</li></ol><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><p>주말을 쿨하게 놀았다. 아직 정신을 못차렸나보다. web dev course 풀스택 체험 하려는데 집중도가 점점 떨어진다. 월말까지 일단 최대한 시도 해보고..</p><p>남은 서버파트는 나중에 완강 고려해봐야겠다, front 쪽과 특히 자바스크립트 심화공부를 먼저 더 집중하는게 맞는거 같아서 커리큘럼을 조금 수정하고 있다. 3원화 시켜 메인 공부 (자바스크립트) / 서브1 ( 알고리즘(문제해결)) /  서브2 (html,css(front , etc)) 식으로 매일 나눠서 진행하는 걸로 할 생각이다. 공부, 수강 끝나고 만족할 만한 결과물이 나온다면 그 때 서버쪽 연동, 풀스택에 도전하는게 맞는거 같다.</p><p>알고리즘 연습사이트 인데, 기록, 결과물 경쟁시스템, 챌린지등 컨텐츠랑 ux 모두 맘에드는 사이트를 발견해서 공유한다</p><p> <strong>[코드시그널</strong>](<a href="https://codesignal.com/" target="_blank" rel="noopener">https://codesignal.com/</a>)</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;하하하&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/til.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;web
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
      <category term="til" scheme="http://mingguk.github.io/categories/post/til/"/>
    
    
      <category term="til" scheme="http://mingguk.github.io/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>backend</title>
    <link href="http://mingguk.github.io/2019/02/21/backend/"/>
    <id>http://mingguk.github.io/2019/02/21/backend/</id>
    <published>2019-02-20T21:55:28.000Z</published>
    <updated>2019-02-20T13:21:51.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/backend.png" alt=""></p><h3 id="Internet-basics"><a href="#Internet-basics" class="headerlink" title="Internet basics"></a>Internet basics</h3><p> ISP에 요청(query) -&gt; DNS 가 IP address 로 변환 -&gt; http 를 통해 가장 빠른 경로로 요청이 해당 IP address 의 서버로 전달 -&gt; 해당 서버가 요청에 해당하는 정보를 DB에서 가져와 응답 -&gt; 요청된 자료 송신 -&gt; 요청자의 브라우저에 의해 데이터가 렌더링 되서 보여짐</p><h3 id="Static-vs-Dynamic"><a href="#Static-vs-Dynamic" class="headerlink" title="Static vs Dynamic"></a>Static vs Dynamic</h3><p>같은 요청에 같은 결과를 출력하는 것을 static , 매 요청 시 조건마다 다른 결과를 출력해주는 건 dynamic</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/backend.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Internet-basics&quot;&gt;&lt;a href=&quot;#Internet-basics&quot; class=&quot;headerlink&quot; title=&quot;Internet basics&quot;
      
    
    </summary>
    
      <category term="Back" scheme="http://mingguk.github.io/categories/Back/"/>
    
      <category term="basic" scheme="http://mingguk.github.io/categories/Back/basic/"/>
    
    
      <category term="backend" scheme="http://mingguk.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>til</title>
    <link href="http://mingguk.github.io/2019/02/21/patata/"/>
    <id>http://mingguk.github.io/2019/02/21/patata/</id>
    <published>2019-02-20T20:02:34.000Z</published>
    <updated>2019-02-25T08:25:43.651Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/til.jpg" alt=""></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li><del>Todolist (jQuery) 완성</del></li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/dgU6eWp1oVY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><a href="https://github.com/mingguk/todolist.git" target="_blank" rel="noopener">source code</a></p><ol start="2"><li><del>backend basics, command line 완강</del></li><li><del>node js 기초 완강</del></li><li><del>server side Frameworks 완강</del></li><li><del>express, intermidiate express 반강</del></li><li><del>codestates PRE SA1 제출</del></li><li><del>c9 개발환경 세팅</del></li><li><del>til 포스팅</del></li></ol><h3 id="주말-23-24-할-일"><a href="#주말-23-24-할-일" class="headerlink" title="주말(23~24) 할 일"></a>주말(23~24) 할 일</h3><ol><li>Web dev Data Associations 까지 수강, 정리</li><li>블로깅 정리</li></ol><h3 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h3><p>js 의 hello world, Todo list 를 완성 했다, html / css 와 js 간의 연계에 조금 익숙해 진거 같다. 강의 진도에 목메다 보니 강의만 순차적으로 따라가고 금방금방 넘어가니 돌아서니 남는게 없다, 좀 느리게 가더라도 배운것을 그때그때 작은 기능이라도 직접만들어 보고 경험하는식으로 바꿔야겠다</p><p>오늘부터 기초 back end 영역 공부를 시작했다, node js express 를 배웠는데 그동안 몰랐던 웹페이지들 연계, 코딩을 이런식으로 하는구나~ 깨달았다.</p><p>주말부터~다음주까지 이 풀스택 기초과정을 끝내고, 전체 돌아가는 그림을 파악한 뒤 다음 커리큘럼을 고민해봐야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/til.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;del&gt;Todolist 
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
      <category term="til" scheme="http://mingguk.github.io/categories/post/til/"/>
    
    
      <category term="til" scheme="http://mingguk.github.io/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>til 첫날</title>
    <link href="http://mingguk.github.io/2019/02/20/til190219/"/>
    <id>http://mingguk.github.io/2019/02/20/til190219/</id>
    <published>2019-02-19T15:44:30.000Z</published>
    <updated>2019-02-25T08:25:09.013Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/til.jpg" alt=""></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ol><li><del>RGB color guessing game 완성 (DOM 연습)</del></li></ol><div class="video-container"><iframe src="https://www.youtube.com/embed/1cg9IYgi3aY" frameborder="0" allow="accelerometer;" autoplay;="" encrypted-media;="" gyroscope;="" picture-in-picture="" allowfullscreen></iframe></div><p><a href="https://github.com/mingguk/colorGame.git" target="_blank" rel="noopener">source code</a></p><ol><li><del>JQUERY 입문 완강</del></li><li><del>javascript Todo list 완성하기</del></li><li><del>hexo 블로그 TIL 포스팅 환경 세팅하기(비디오, 깃헙 연동)</del></li><li><del>Todolist (jQuery) 준비하기</del></li></ol><h3 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h3><p>일부러 라이브러리 없이 바닐라 자바스크립트로만 공부해오다 드디어 라이브러리에 살짝 발을 담궈봤다</p><p>(불편함을 겪어봐야 왜 이게 좋은지, 필요한지 격하게 느낄 수 있다길래..)</p><p>되게 많이 편하다. 근데 한편으로 이 기능이 왜 되는지, 안되는지 알 수 없어서 약간 자존심이 상한다는 느낌?</p><p>앞으로 일주일간 html,css 를 js 로 조작 연습 위해 toy projects 를 몇개 진행하고, udemy colt steel web bootcamp 마무리를 할 예정이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/til.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;del&gt;RGB color
      
    
    </summary>
    
      <category term="post" scheme="http://mingguk.github.io/categories/post/"/>
    
      <category term="til" scheme="http://mingguk.github.io/categories/post/til/"/>
    
    
      <category term="til" scheme="http://mingguk.github.io/tags/til/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="http://mingguk.github.io/2019/02/05/jQuery/"/>
    <id>http://mingguk.github.io/2019/02/05/jQuery/</id>
    <published>2019-02-04T21:10:09.000Z</published>
    <updated>2019-02-04T12:19:35.866Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw jquery 1.png" alt=""></p><p><a href="">next</a></p><p><a href="http://mingguk.github.io/2019/02/05/Building-an-object/">Building objects</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw jquery 1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mingguk.github.io/2019/02/05/Building-an-ob
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Building objects</title>
    <link href="http://mingguk.github.io/2019/02/05/Building-an-object/"/>
    <id>http://mingguk.github.io/2019/02/05/Building-an-object/</id>
    <published>2019-02-04T18:03:18.000Z</published>
    <updated>2019-02-04T12:12:40.581Z</updated>
    
    <content type="html"><![CDATA[<p>객체를 생성하는 여러가지 방식 중 하나는 new 키워드를 활용한<br><strong>생성자 함수</strong> 를 사용하는 방법이 있다.</p><h3 id="new-keyword"><a href="#new-keyword" class="headerlink" title="new keyword"></a>new keyword</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// java 같은..</span><br><span class="line">function Person() &#123;</span><br><span class="line">console.log(this);</span><br><span class="line">    this.firstname = &apos;John&apos;,</span><br><span class="line">    this.lastname = &apos;Doe&apos;</span><br><span class="line">    console.log(&apos;This function is invoked.&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//new는 특별한 operator 이다</span><br><span class="line">var john = new Person(); //생성자 함수</span><br><span class="line">//console.log(john);</span><br><span class="line"></span><br><span class="line">&#123;&#125;</span><br><span class="line">This function is invoked.</span><br><span class="line">Person &#123;firstname: &apos;John&apos;, lastname: &apos;Doe&apos;&#125;</span><br></pre></td></tr></table></figure><p><strong>생성자 함수 (new + function() )</strong></p><p>생성자 함수가 실행되면 아래와 같은 순서로 진행된다.</p><ol><li>{} 빈 객체 생성</li><li>Person() 실행 - execution 생성, this 생성(this 는 생성된 빈 객체 가르킴)</li><li>Person() 내 로직 따라 빈객체에 firstname, lastname 속성 추가 됨</li><li>생성된 객체 Person{firstname: ‘John’, lastname: ‘Doe’} 리턴</li></ol><p>따라서 new 키워드와 + 정의된 Person() 를 실행 할 때마다 <strong>새로운 객체, </strong><br><strong>Person()의 인스턴스</strong> 를 생성한다고 할 수 있다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//필요한 요소를 인자로 받으면 서로 다른 속성 가진 인스턴스 생성 가능</span><br><span class="line">function Person(firstname, lastname) &#123;</span><br><span class="line">    this.firstname = firstname;</span><br><span class="line">    this.lastname = lastname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var john = new person(&apos;John&apos;, &apos;Doe);</span><br><span class="line">var jane = new person(&apos;Jane&apos;, &apos;Doe&apos;);</span><br><span class="line"></span><br><span class="line">console.log(jane);</span><br><span class="line"></span><br><span class="line">// Person &#123;firstname: &apos;Jane&apos;, lastname: &apos;Doe&apos;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/jsw bo prototype.png" alt=""></p><p>객체가 생성되면 자동으로 prototype 이라는 속성이 빈 객체 {} 로 추가된다. <strong>생성자함수를 사용 할 때만</strong>, prototype 속성이 사용된다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//아래 코드를 추가하면 </span><br><span class="line">Person.prototype.getFullName = function() &#123;</span><br><span class="line">    return this.firstname + &apos; &apos; + this.lastname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// new Person() 으로 생성된 객체들은 모두 getFullName() 을 속성으로 갖게된다.</span><br></pre></td></tr></table></figure><p>그냥 Person() 내에 해당 함수를 추가해주면 되지않나?<br>그렇게 되면 생성된 모든객체에 함수가 중복존재하기 때문에 메모리가 낭비된다.</p><p><strong>주의사항</strong></p><p>new를 실수로 빼먹으면 Person() 함수는 리턴값이 없기 때문에 <strong>undefined error 발생</strong>, 이러한 이유로 생성자 함수를 일반 함수와 구분하기 위해 <strong>첫글자를 대문자로</strong> 생성해주는 컨벤션 존재</p><h3 id="built-in-functions"><a href="#built-in-functions" class="headerlink" title="built-in functions"></a>built-in functions</h3><p> 각 타입의 기본객체의 prototype 에 속성이나 메소드를 추가하면 생성자함수로 생성한 모든 객체에서 해당 속성, 메소드에 접근할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.isLengthGreaterThan = function(limit) &#123;</span><br><span class="line">    return this.length &gt; limit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// String 기본객체의 prototype 에 함수 추가 했음으로</span><br><span class="line">// 모든 string 에서 해당 함수 호출 가능</span><br><span class="line">console.log(&apos;John&apos;.isLengthGreaterThan(3));</span><br><span class="line"></span><br><span class="line">Number.prototype.isPositive = function() &#123;</span><br><span class="line">    return this &gt; 0;</span><br><span class="line">&#125;</span><br><span class="line">var a = new Number(3);</span><br><span class="line">a.isPositive(); // true</span><br></pre></td></tr></table></figure><p><strong>주의사항</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 객체타입과 원시타입 간 차이 주의 할 것</span><br><span class="line">var a = 3; //primitive type</span><br><span class="line">var b = new Number(3); // Object</span><br><span class="line">var c = Number(&apos;3&apos;); // 3</span><br><span class="line"></span><br><span class="line">a == b // true;</span><br><span class="line">a === b // false;</span><br><span class="line"></span><br><span class="line">//Arrays and For in</span><br><span class="line">var arr = [&apos;John&apos;, &apos;Jane&apos;, &apos;Jim&apos;];</span><br><span class="line"></span><br><span class="line">for (var prop in arr) &#123;</span><br><span class="line">    console.log(prop + &apos;: &apos; + arr[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 0: John</span><br><span class="line">// 1: Jane</span><br><span class="line">// 2: Jim   ???</span><br><span class="line"></span><br><span class="line">//array 도 객체라서 key : value pair 로 묶여버림</span><br><span class="line">Array.prototype.myCustomFeature = &apos;cool&apos;; // myCustomFeature : cool</span><br><span class="line"></span><br><span class="line">// 자바스크립트 배열에서는 array 에서 for..in 쓰지 말 것!</span><br></pre></td></tr></table></figure><p><img src="/images/jsw bo pure.png" alt=""></p><p>또 다른방식으로 객체를 생성하는 방식을 알아보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &apos;Default&apos;,</span><br><span class="line">    lastname: &apos;Default&apos;,</span><br><span class="line">    greet: function() &#123;</span><br><span class="line">        return &apos;Hi &apos; + this.firstname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//prototype 이 생성된 객체 그자체로 설정되는 방식</span><br><span class="line">var john = Object.create(person);</span><br><span class="line">john.firstname = &apos;John&apos;;</span><br><span class="line">john.lastname = &apos;Doe&apos;;</span><br><span class="line">console.log(john);</span><br></pre></td></tr></table></figure><h3 id="Class-amp-ES6"><a href="#Class-amp-ES6" class="headerlink" title="Class &amp; ES6"></a>Class &amp; ES6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// prototype 을 설정하는 방식 extends</span><br><span class="line">class Person extends Human&#123;</span><br><span class="line">    constructor(firstname, lastname) &#123;</span><br><span class="line">      //super(firstname, lastname); </span><br><span class="line">        this.firstname = firstname;</span><br><span class="line">        this.lastname = lastname;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        return &apos;Hi &apos; + firstname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var john = new Person(&apos;John&apos;, &apos;Doe&apos;);</span><br></pre></td></tr></table></figure><h3 id="Odds-and-Ends"><a href="#Odds-and-Ends" class="headerlink" title="Odds and Ends"></a>Odds and Ends</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// Initialization</span><br><span class="line"></span><br><span class="line">var people = [</span><br><span class="line">//object 1</span><br><span class="line">    &#123;</span><br><span class="line">        firstname: &apos;John&apos;,</span><br><span class="line">        lastname: &apos;Doe&apos;</span><br><span class="line">        address: [</span><br><span class="line">            &apos;111 Main St.&apos;,</span><br><span class="line">            &apos;222 Third St.&apos;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //object2</span><br><span class="line">    &#123;</span><br><span class="line">        firstname: &apos;Jane&apos;,</span><br><span class="line">        lastname: &apos;Doe&apos;,</span><br><span class="line">        address: [</span><br><span class="line">            &apos;333 Main St.&apos;,</span><br><span class="line">            &apos;444 Fifth St.&apos;</span><br><span class="line">        ],</span><br><span class="line">        </span><br><span class="line">        greet: function() &#123;</span><br><span class="line">            return &apos;Hello!&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">console.log(people);</span><br><span class="line"></span><br><span class="line">//</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/05/jQuery/">jQuery</a></p><p><a href="http://mingguk.github.io/2019/02/05/OOP-in-javascript/">OOP in javascript</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;객체를 생성하는 여러가지 방식 중 하나는 new 키워드를 활용한&lt;br&gt;&lt;strong&gt;생성자 함수&lt;/strong&gt; 를 사용하는 방법이 있다.&lt;/p&gt;
&lt;h3 id=&quot;new-keyword&quot;&gt;&lt;a href=&quot;#new-keyword&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>OOP in javascript</title>
    <link href="http://mingguk.github.io/2019/02/05/OOP-in-javascript/"/>
    <id>http://mingguk.github.io/2019/02/05/OOP-in-javascript/</id>
    <published>2019-02-04T16:31:58.000Z</published>
    <updated>2019-02-04T09:04:57.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw OOP.png" alt=""></p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>타 언어의 전통적인 상속은 상속을 구현하기 위해 많은 부수적인 것들을 고려해야 됐다. 반면에 자바스크립트의 상속은 <strong>prototypal inheritance</strong>로 좀 더 유연하고 직관적이다.</p><p><img src="/images/jsw inheritance.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &apos;Default&apos;,</span><br><span class="line">    lastname: ;Default&apos;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        return this.firstname + &apos; &apos; + this.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var john = &#123;</span><br><span class="line">    fristname: &apos;John&apos;,</span><br><span class="line">    lastname: &apos;Doe&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//don&apos;t do this Ever! demo purposes only!</span><br><span class="line">john.__proto__ = person;</span><br><span class="line">//john 객체에서 속성이나 메소드 탐색 후 없으면 proto&#123;&#125; 탐색</span><br><span class="line">console.log(john.getFullName()); // John Doe</span><br><span class="line"></span><br><span class="line">var jane = &#123;</span><br><span class="line">    firstname: &apos;Jane&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jane.__proto__ = person;</span><br><span class="line">console.log(jane.getFullName()); // Jane Default;</span><br></pre></td></tr></table></figure><h3 id="Everyting-is-and-object"><a href="#Everyting-is-and-object" class="headerlink" title="Everyting is and object"></a>Everyting is and object</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&#125;;</span><br><span class="line">var b = function() &#123;&#125;;</span><br><span class="line">var c = [];</span><br><span class="line"></span><br><span class="line">a.__proto__. // Object&#123;&#125; (base object);</span><br><span class="line">b.__proto__. // Empty() &#123;&#125; (base function object);</span><br><span class="line">c.__proto__. //</span><br></pre></td></tr></table></figure><p><img src="/images/jsw prototype1.png" alt=""></p><p>b 는 빈함수임에도 proto 를 살펴보면 기본 함수 객체의 모든 메소드들에 접근이 가능하다. (빈 배열, 객체도 마찬가지) 우리가 어떤 배열, 객체, 함수를 생성했을 때 따로 명시적으로 메소드를 생성하지 않더라도 자바스크립트 엔진이 <strong>프로토타입을 자동으로 기본 객체들에 연결해준다.</strong>  이 때문에 기본 객체들에 있는 메소드들을 새로 생성한 객체에서도 자유롭게 사용할 수 있는 것이다.</p><h3 id="Reflection-and-Extend"><a href="#Reflection-and-Extend" class="headerlink" title="Reflection and Extend"></a>Reflection and Extend</h3><p><img src="/images/jsw reflection.png" alt=""></p><p>함수정의 때와  다른 인자 개수를 받을 때는 arguments 를 통해 처리할 수 있다.</p><p>(추후 수정)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &apos;Default&apos;,</span><br><span class="line">    lastname: ;Default&apos;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        return this.firstname + &apos; &apos; + this.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var john = &#123;</span><br><span class="line">    fristname: &apos;John&apos;,</span><br><span class="line">    lastname: &apos;Doe&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var prop in john) &#123;</span><br><span class="line">if (john.hasOwnProperty(prop)) &#123;</span><br><span class="line">    console.log(prop + &apos;: &apos; + john[prop])        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// firstname : &apos;John&apos;, lastname : &apos;Doe&apos;</span><br><span class="line"></span><br><span class="line">var jane = &#123;</span><br><span class="line">    address: &apos;111 Main St.&apos;;</span><br><span class="line">    getFormalFullName: function() &#123;</span><br><span class="line">        return this.lastname + &apos;, &apos; + this.firstname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var jim = &#123;</span><br><span class="line">    getFirstName: function() &#123;</span><br><span class="line">        return firstname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 다른 객체들의 속성들을 다른 객체에게 전달하고 싶다면?</span><br><span class="line">_.extend(john, jane, jim ..);</span><br><span class="line">// 다른 객체들의 속성,메소드들을 추가한 john 객체가 리턴 됨.</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><hr><p><a href="http://mingguk.github.io/2019/02/05/Building-an-object/">building an object</a></p><p><a href="http://mingguk.github.io/2019/02/04/Funtional-programming/">Functional programming</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw OOP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;prototype&lt;/h3
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Funtional programming</title>
    <link href="http://mingguk.github.io/2019/02/04/Funtional-programming/"/>
    <id>http://mingguk.github.io/2019/02/04/Funtional-programming/</id>
    <published>2019-02-03T16:29:45.000Z</published>
    <updated>2019-02-04T07:28:07.386Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw functional programming.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 비함수형</span><br><span class="line">var arr1 = [1,2,3];</span><br><span class="line">console.log(arr1);</span><br><span class="line"></span><br><span class="line">var arr2 = [];</span><br><span class="line">for (var i=0; i&lt;arr1.length; i++) &#123;</span><br><span class="line">    arr2.push(arr[i] * 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 함수형</span><br><span class="line">//기반 함수 생성</span><br><span class="line">function mapForEach(arr, fn) &#123;</span><br><span class="line">    var newArr = [];</span><br><span class="line">    for (var i=0; i&lt;arr1.length; i++) &#123;</span><br><span class="line">    newArr.push(</span><br><span class="line">    fn(arr[i])</span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 기반함수에다 다른 함수를 인자로 넣어 다양하게 활용 가능</span><br><span class="line">var arr2 = mapForEach(arr1, function(item) &#123;</span><br><span class="line">   return item * 2; </span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr2);</span><br><span class="line"></span><br><span class="line">var arr3 = mapForEach(arr1, function(item) &#123;</span><br><span class="line">    return item &gt; 2;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 인자 수가 다른 함수는 어떻게 활용할 수 있을까?</span><br><span class="line">var checkPastLimit = function(limiter, item) &#123;</span><br><span class="line">    return item &gt; limiter;</span><br><span class="line">&#125;</span><br><span class="line">// bind()로 limiter 인자 기본값 지정해주면 가능</span><br><span class="line">var arr4 = marForEach(arr1, checkPastLimit.bind(this, 1));</span><br><span class="line"></span><br><span class="line">// 매번 bind() 달지않고 싶다면</span><br><span class="line">//bind() 포함한 새로운 함수를 만들어서</span><br><span class="line">var checkPastLimitSimplified = function(limiter) &#123;</span><br><span class="line">    return function(limiter, item) &#123;</span><br><span class="line">        return item &gt; limiter;</span><br><span class="line">    &#125;.bind(this, limiter);</span><br><span class="line">&#125;;</span><br><span class="line">var arr5 = mapForEach(arr1, checkPastLimitSimplified(1));</span><br><span class="line">console.log(arr5);</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍은 1급함수 성질을 활용해서,  각각의 함수를 인자나 리턴으로 또 함수를 전달하도록 해서 보다 단순화되고 효율적인 코드를 작성할 수 있다.</p><p>함수형 프로그래밍에 대한 이해도를 좀 더 높히고 싶다면 아래의 라이브러리 함수들을 직접 구현해 보는 것을 추천한다. codestates pre course에서도 비슷한 것을 경험한 적이 있는데, 가장 기본적인 함수들을 재사용 해서 다른 라이브러리 함수 로직을 직접 구현해 보는 연습을 할 수 있다.</p><p><a href="https://github.com/indongyoo/functional-javascript/wiki/3.1-Underscore.js-%EC%86%8C%EA%B0%9C" target="_blank" rel="noopener">Underscore.js 도전하기!</a></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><hr><p><a href="">Next</a></p><p><a href="http://mingguk.github.io/2019/02/03/Call-Bind/">call bind apply</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw functional programming.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>call&amp;apply&amp;bind</title>
    <link href="http://mingguk.github.io/2019/02/03/Call-Bind/"/>
    <id>http://mingguk.github.io/2019/02/03/Call-Bind/</id>
    <published>2019-02-02T21:24:12.000Z</published>
    <updated>2019-02-03T07:32:30.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw cab.png" alt=""></p><p>자바스크립트 함수에는 앞서 언급한 code, name 외에도 call, apply, bind 라는 기본 메소드를 갖고 있다. 이 메소드들은 <strong>this</strong> 키워드를 조작해주는 역할을 한다.</p><p><img src="/images/jsw callbindapply.png" alt=""></p><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname : &apos;John&apos;,</span><br><span class="line">    lastname : &apos;Doe&apos;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        var fullname = this.firstname + &apos; &apos; + this.lastname;</span><br><span class="line">        return fullname;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var logName = function(lang1, lang2) &#123;</span><br><span class="line">    console.log(&apos;Logged: &apos; + this.getFullName());</span><br><span class="line">    console.log(&apos;Arguments: &apos; + lang1 + &apos; &apos; +. lange2);</span><br><span class="line">    console.log(&apos;----------&apos;);</span><br><span class="line">&#125; </span><br><span class="line">// .bind(person) 해도 아래와 동일한 결과</span><br><span class="line"></span><br><span class="line">logName(); // undefined error, 현재 this는 logName</span><br><span class="line"></span><br><span class="line">//logPersonName 의 this를 person 으로 변경</span><br><span class="line">var logPersonName = logName.bind(person);</span><br><span class="line"></span><br><span class="line">logName(); // this가 person으로 변경, Logged John Doe</span><br></pre></td></tr></table></figure><p>bind() 는 새로운 함수를 반환하는데 인자로 들어가는 객체를 함수의 this로 바꿔주는 역할을 한다.</p><h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call(), apply()"></a>call(), apply()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname : &apos;John&apos;,</span><br><span class="line">    lastname : &apos;Doe&apos;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        var fullname = this.firstname + &apos; &apos; + this.lastname;</span><br><span class="line">        return fullname;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var logName = function(lang1, lang2) &#123;</span><br><span class="line">    console.log(&apos;Logged: &apos; + this.getFullName());</span><br><span class="line">    console.log(&apos;Arguments: &apos; + lang1 + &apos; &apos; +. lange2);</span><br><span class="line">    console.log(&apos;----------&apos;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">var logPErsonName = logName.bind(person);</span><br><span class="line">logPersonName(&apos;en&apos;);</span><br><span class="line"></span><br><span class="line">logName.call(person, &apos;en&apos;, &apos;es&apos;);</span><br><span class="line">console.log(&apos;mmmmmmmmmmmmmmm&apos;);</span><br><span class="line">logName.apply(person, [&apos;en&apos;, &apos;es&apos;]);</span><br><span class="line"></span><br><span class="line">//Logged: John Doe</span><br><span class="line">//Arguments: en es</span><br><span class="line">//----------------</span><br><span class="line">//mmmmmmmmmmmmmmmm</span><br><span class="line">//Logged: John Doe</span><br><span class="line">//Arguments: en es</span><br><span class="line">//----------------</span><br><span class="line"></span><br><span class="line">//IIFE 로도 가능</span><br><span class="line">(function(lang1, lang2) &#123;</span><br><span class="line">    console.log(&apos;Logged: &apos; + this.getFullName());</span><br><span class="line">    console.log(&apos;Arguments: &apos; + lang1 + &apos; &apos; +. lange2);</span><br><span class="line">    console.log(&apos;----------&apos;);</span><br><span class="line">&#125;).apply(person, [&apos;en&apos;, &apos;es&apos;]);</span><br><span class="line"></span><br><span class="line">//Logged: John Doe</span><br><span class="line">//Arguments: en es</span><br><span class="line">//----------------</span><br></pre></td></tr></table></figure><p>call() 과 apply() 는 bind와 마찬가지로 this를 변경하고, 인자를 넘기고 함수를 <strong>실행</strong>까지 한다. 둘의 차이는 인자를 따로 넘기냐, 묶여서 배열로 넘기냐의 차이밖에 없다.</p><h3 id="Why-When"><a href="#Why-When" class="headerlink" title="Why? When?"></a>Why? When?</h3><p>그럼 언제 이 메소드들을 활용할 수 있을까</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//1. function borrowing</span><br><span class="line">var person2 = &#123;  // getFullName() 없는 객체 생성</span><br><span class="line">    firstname : &apos;John&apos;,</span><br><span class="line">    lastname : &apos;Doe&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// person 의 getFullName() 빌려 올 수 있다</span><br><span class="line">console.log( person.getFullName.apply(person2) );</span><br><span class="line"></span><br><span class="line">//2. function currying</span><br><span class="line">function multiply(a,b) &#123;</span><br><span class="line">    return a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//인자 기본값을 넣은 새로운 함수 생성 효과</span><br><span class="line">var multipleByTwo = multiply.bind(this, 2); </span><br><span class="line">console.log(multipleByTwo(4)); // 8</span><br><span class="line"></span><br><span class="line">var multipleByThree = multiply.bind(this, 3);</span><br><span class="line">console.log(multipleByTwo(4)); // 12</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/04/Funtional-programming/">Functional programming</a></p><p><a href="http://mingguk.github.io/2019/02/03/Closure2/">Closure part2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw cab.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트 함수에는 앞서 언급한 code, name 외에도 call, apply, bind 라는 기본 메소드를 갖고 있다. 이 메소드들은 &lt;strong&gt;this&lt;
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Closure part2</title>
    <link href="http://mingguk.github.io/2019/02/03/Closure2/"/>
    <id>http://mingguk.github.io/2019/02/03/Closure2/</id>
    <published>2019-02-02T18:43:06.000Z</published>
    <updated>2019-02-02T12:33:29.471Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw closure2.png" alt=""></p><p>공장에서 정해진 포멧에 따라 제품들을 생산하는 것처럼 <strong>팩토리패턴</strong>은 전체 로직을 담은 팩토리함수를 생성, 클로저를 활용해서 반복되는 인자를 기본값으로 하는 함수를 재정의 하고, 호출하는 방식이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// factory function</span><br><span class="line">function makeGreeting(language) &#123;</span><br><span class="line">    return function(firstname, lastname) &#123;</span><br><span class="line">        </span><br><span class="line">        //inside function</span><br><span class="line">        if (language === &apos;en&apos;) &#123;</span><br><span class="line">            console.log(&apos;Hello &apos; + firstname + &apos; &apos; + lastname);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        if (language === &apos;es&apos;) &#123;</span><br><span class="line">            console.log(&apos;Hola &apos; + firstname + &apos; &apos; + lastname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 매번 호출마다 새로운 execution context 생성</span><br><span class="line">var greetEnglish = makeGreeting(&apos;en&apos;);</span><br><span class="line">var greetSpanish = makeGreeting(&apos;es&apos;);</span><br><span class="line"></span><br><span class="line">// 직접 language 접근못하지만, 사용하는 함수</span><br><span class="line">greetingEnglish(&apos;John&apos;, &apos;Doe&apos;);</span><br><span class="line">greetingSpanish(&apos;John&apos;, &apos;Doe&apos;);</span><br></pre></td></tr></table></figure><p>코드 실행 시 makeGreeting(‘en’) 을 만나면 execution context 를 생성하고 en을 할당한다.</p><p><img src="/images/jsw closure2 1.png" alt=""></p><p>makeGreeting(‘es’) 동일하게 진행되고, 함수실행이 끝나면 language 만 남게된다.</p><p><img src="/images/jsw closure2 2.png" alt=""></p><p>그 다음 greetingEnglish(), greetingSpanish() 가 실행되면  각각의 outer environment 에서 language를 참조</p><p><img src="/images/jsw closure2 3.png" alt=""></p><p>즉, <strong>클로저</strong>를 통해 각각의 langauge를 참조하여 각각의 함수를 실행하고 결과를 출력하게 된다.</p><p><img src="/images/jsw closure2 4.png" alt=""></p><h3 id="Closure-and-Callback"><a href="#Closure-and-Callback" class="headerlink" title="Closure and Callback"></a>Closure and Callback</h3><p>콜백함수는 다른 함수에 인자로 넘긴 함수로, 다른함수 실행이 끝나면 실행되도록 한 함수이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function sayHiLater() &#123;</span><br><span class="line">   //외부변수 greeting 참조, closure</span><br><span class="line">   var greeting = &apos;Hi&apos;;</span><br><span class="line">    </span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        console.log(greeting);</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHiLater();</span><br><span class="line"></span><br><span class="line">function tellMeWhenDone(callback) &#123;</span><br><span class="line">    var a = 1000;</span><br><span class="line">    var b = 2000;</span><br><span class="line">    </span><br><span class="line">    callback(); // 인자로 넣은 함수</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tellMeWhenDone(function() &#123;</span><br><span class="line">   console.log(&quot;I&apos;m done!&apos;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">tellMeWhenDone(function() &#123;</span><br><span class="line">   alert(&quot;I&apos;m done!&apos;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">tellMeWhenDone(function() &#123;</span><br><span class="line">   console.log(&quot;All done&apos;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/03/Call-Bind/">Call &amp; Apply &amp;Bind</a></p><p><a href="http://mingguk.github.io/2019/02/01/Closure/">Closure part1</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw closure2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;공장에서 정해진 포멧에 따라 제품들을 생산하는 것처럼 &lt;strong&gt;팩토리패턴&lt;/strong&gt;은 전체 로직을 담은 팩토리함수를 생성, 클로저를 활용해서 반
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Closure part1</title>
    <link href="http://mingguk.github.io/2019/02/01/Closure/"/>
    <id>http://mingguk.github.io/2019/02/01/Closure/</id>
    <published>2019-02-01T00:00:10.000Z</published>
    <updated>2019-02-02T09:50:53.467Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw closure.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//결과로 함수를 리턴 하는 함수</span><br><span class="line">function greet(whattosay) &#123;</span><br><span class="line">    return function(name) &#123;</span><br><span class="line">        console.log(whattosay + &apos; &apos; + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&apos;Hi&apos;)(&apos;Tony&apos;);</span><br><span class="line">//Hi Tony</span><br><span class="line"></span><br><span class="line">// greet() 실행이 끝나면 greet()의 execution context 사라짐</span><br><span class="line">var sayHi = greet(&apos;Hi&apos;); </span><br><span class="line"></span><br><span class="line">// 그럼에도 불구하고 어떻게 sayHi()가 다시 whattosay를 참조 했을까?</span><br><span class="line">sayHi(&apos;Tony&apos;); </span><br><span class="line">//Hi tony</span><br></pre></td></tr></table></figure><h3 id="Closure-클로저"><a href="#Closure-클로저" class="headerlink" title="Closure, 클로저 ?"></a>Closure, 클로저 ?</h3><p><img src="/images/jsw closure 0.png" alt=""></p><p>greet(‘Hi’) 가 실행되면 execution context를 생성하고, whattosay 변수를 생성한다.</p><p><img src="/images/jsw closure 1.png" alt=""></p><p>greet() 코드 실행이 끝나면 greet() 의 execution context 는 삭제되지만 whattosay 는 메모리에 여전히 남아있다.</p><p><img src="/images/jsw closure 2.png" alt=""></p><p>그 다음 sayHi(‘Tony’) 가 실행되면 execution context, name 변수 생성하고 다시 한 번 greet() 의 코드를 실행할 것이다. 그러다 console.log(whattosay + ‘ ‘ + name); 코드를 다시 만나면 sayHi(“Tony”)의         execution context 에서 whattosay 변수를 탐색하고, 없다면 <strong>스코프체인</strong>을 따라 outer environment에서 whattosay를 다시 탐색, 코드를 실행한다.</p><p>greet() 함수가 종료되었음에도 내부의 function(name) { console.log(whattosay + ‘ ‘ + name) }; 은 여전히 외부의 whattosay에 접근할 수 있는 셈이다.</p><p><img src="/images/jsw closure 3.png" alt=""></p><p>다시말해, <strong>외부함수가 종료된 뒤에도 내부함수는 여전히 외부함수의 execution context가 사용한 메모리공간에 접근이 가능하다는 것이다.</strong> 이러한 특성을 <strong>Closure, 클로저</strong>라고 한다. 자바스크립트에서는 이 클로저의 특성을 활용한 패턴이 매우 빈번하게 활용되고 있으니 꼭 그 원리를 이해하고 넘어가자.</p><h3 id="클로저-예제"><a href="#클로저-예제" class="headerlink" title="클로저 예제"></a>클로저 예제</h3><p> 아래의 예제를 살펴보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function buildFunction() &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    </span><br><span class="line">    for (var i = 0; i &lt;3; i++) &#123;</span><br><span class="line">        arr.push(</span><br><span class="line">        function() &#123;</span><br><span class="line">                console.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fs = buildFunction();</span><br><span class="line"></span><br><span class="line">fs[0]();</span><br><span class="line">fs[1]();</span><br><span class="line">fs[2]();</span><br><span class="line"></span><br><span class="line">// 3 3 3 (!?!? 왜때문에?)</span><br></pre></td></tr></table></figure><p>코드를 잘 살펴보자</p><p><img src="/images/jsw closure ex2.png" alt=""></p><p>buildFunction() 이 먼저 실행되면 노란색으로 표시한 for문 내부의 로직은 expression 이 아니라 statement기 때문에 실행되진 않고 함수선언 자체가 배열에 각각 삽입 될 것이다.</p><p><img src="/images/jsw closure ex3.png" alt=""></p><p>buildFunction() 실행이 끝나면 exectuion context 는 삭제되지만 <strong>해당 변수들은 메모리에 남아있다.</strong></p><p><img src="/images/jsw closure ex4.png" alt=""></p><p>이후 fs[0,1,2] 함수가 각각 실행되어 내부로직을 실행할 때 클로저 특성에 따라 arr과 i를 참조하게 된다. fs() 를 호출하는 시점에서 i의 값은 3이기 때문에 3번의 실행 <strong>모두 i=3 을 참조</strong> 해서 0,1,2 가 아닌 <strong>3,3,3</strong>을 출력하게 된다.</p><p>###만약 0,1,2를 출력하게 하려면?</p><p><strong>let keyword</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function buildFunction2() &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    </span><br><span class="line">    for (var i = 0; i &lt;3; i++) &#123;</span><br><span class="line">    let j = i; //block 내 한정, 함수 호출마다 다른 i 삽입</span><br><span class="line">        arr.push(</span><br><span class="line">        function() &#123;</span><br><span class="line">                console.log(j);</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fs = buildFunction();</span><br><span class="line"></span><br><span class="line">fs[0]();</span><br><span class="line">fs[1]();</span><br><span class="line">fs[2]();</span><br></pre></td></tr></table></figure><p><strong>IIFE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function buildFunction3() &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    </span><br><span class="line">    for (var i = 0; i &lt;3; i++) &#123;</span><br><span class="line">        arr.push(</span><br><span class="line">        (function(j) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">                console.log(j);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)(i); </span><br><span class="line">      //IIFE로 각각의 ec 생성, i를 변수j에 저장하면 </span><br><span class="line">      //내부함수 실행마다 closure로 각각의 </span><br><span class="line">      //i값 저장한 변수j에 접근가능 =&gt; 0,1,2</span><br><span class="line">        )</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fs = buildFunction();</span><br><span class="line"></span><br><span class="line">fs[0]();</span><br><span class="line">fs[1]();</span><br><span class="line">fs[2]();</span><br></pre></td></tr></table></figure><p>각각의 execution context 를 생성하고 그때마다 i를 따로 저장하면 가능한데 ,execution context를 생성하는 유일한 방법은 <strong>함수를 실행하는 것</strong>이다.. -&gt; <strong>IIFE 활용</strong></p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/03/Closure2/">Closure part2</a></p><p><a href="http://mingguk.github.io/2019/02/01/IIFE/">IIFE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw closure.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>IIFE</title>
    <link href="http://mingguk.github.io/2019/02/01/IIFE/"/>
    <id>http://mingguk.github.io/2019/02/01/IIFE/</id>
    <published>2019-01-31T19:48:00.000Z</published>
    <updated>2019-02-02T09:09:12.441Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw IIFE.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//function statement</span><br><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(&apos;Hello &apos; + name); </span><br><span class="line">&#125;</span><br><span class="line">greet(&apos;John);  //Hello John</span><br><span class="line"></span><br><span class="line">//using a function expression </span><br><span class="line">var greetFunc = function(name) &#123;</span><br><span class="line">    console.log(&apos;Hello &apos; + name);</span><br><span class="line">&#125;;</span><br><span class="line">greetFunc(); //Hello John</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//IIFE 함수 생성 후 바로 실행시킴</span><br><span class="line">var greetFunc = function(name) &#123;</span><br><span class="line">    return &apos;Hello &apos; + name;</span><br><span class="line">&#125;(&apos;John&apos;);</span><br><span class="line"></span><br><span class="line">console.log(greeting); // Hello John</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">3;  //vaild</span><br><span class="line">&apos;I&apos;m a string&apos; //vaild</span><br><span class="line">&#123; name: &apos;John&apos; &#125; //vaild</span><br><span class="line"></span><br><span class="line">//그렇다면 함수는?</span><br><span class="line"></span><br><span class="line">//function statement </span><br><span class="line"></span><br><span class="line">function(name) &#123;</span><br><span class="line">    return &apos;Hello &apos; + name;</span><br><span class="line">&#125;</span><br><span class="line">// function 키워드를 보면 statement라고 인식</span><br><span class="line">// 함수명을 요구하기에 error 발생!</span><br><span class="line"></span><br><span class="line">// statement를 괄호()로 묶으면 expression으로 인식</span><br><span class="line">// 함수 생성과 호출을 동시에, IIFE</span><br><span class="line"></span><br><span class="line">var tom = &apos;Tom&apos;</span><br><span class="line"></span><br><span class="line">(function(name) &#123;</span><br><span class="line">   var greeting = &apos;Inside IIFE: Hello&apos;;</span><br><span class="line">   console.log(greeting + &apos; &apos; + name); </span><br><span class="line">&#125;(tom)); // Inside IIFE: Hello Tom</span><br><span class="line"></span><br><span class="line">//IIFE 구조</span><br><span class="line">(function &#123;...&#125;)();  //괄호 밖</span><br><span class="line">(function &#123;...&#125;()); // 괄호 안, 둘 다 가능</span><br></pre></td></tr></table></figure><hr><h3 id="Why-IIFE"><a href="#Why-IIFE" class="headerlink" title="Why IIFE ?"></a>Why IIFE ?</h3><p><img src="/images/jsw IIFE2.png" alt=""></p><p>IIFE 코드가 실행되면 발생하는 일</p><ol><li>Global Execution context 생성</li><li>IIFE 코드, expression을 만나면 메모리에 () 함수 공간 할당</li><li>코드 끝 호출 () 를 만나면 새로운 Execution context 생성</li><li>IIFE 내 변수들 메모리에 할당 () , <strong>Not to Global Object</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;greet.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//greet.js</span><br><span class="line">var greeting = &apos;Hola&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//app.js</span><br><span class="line">(function(name) &#123;</span><br><span class="line">    var greeting = &apos;Hello&apos;;</span><br><span class="line">    console.log(greeting + &apos; &apos; + name);</span><br><span class="line">&#125;)(&apos;John&apos;); //IIFE</span><br><span class="line"></span><br><span class="line">console.log(greeting);</span><br><span class="line"></span><br><span class="line">// Hello John</span><br><span class="line">// Hola</span><br></pre></td></tr></table></figure><p><img src="/images/jsw IIFE3.png" alt=""></p><p>​          <strong>Global 의 greeting 과 IIFE 의 greeting 이 충돌없이 공존</strong></p><p><br></p><hr><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p> IIFE 코드 내 변수들은 전부 IIFE 의 Execution context 내의 variable environment 에 속하기 때문에 전역객체에 영향 안줌, <strong>전역 변수나 다른 execution context 들의 변수들과 충돌 가능성 없음! </strong></p><p>이 때문에 대부분의 <strong>라이브러리나 프레임워크는 IIFE 형식으로 설계</strong> 되어있음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var global = window;</span><br><span class="line"></span><br><span class="line">(function(global, name) &#123;</span><br><span class="line">    var greeting = &apos;Hello&apos;;</span><br><span class="line">    global.greeting = &apos;Hello global&apos;;</span><br><span class="line">    console.log(greeting + &apos; &apos; + name);</span><br><span class="line">&#125;)(window, &apos;John&apos;); //IIFE</span><br></pre></td></tr></table></figure><p>만약 IIFE 로 <strong>글로벌 객체</strong>에 영향을 주고 싶다면? </p><p>IIFE에 글로벌 객체를 <strong>인자</strong>로 전달해서 조작하면 가능</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/01/Closure/">Closure</a></p><p><a href="http://mingguk.github.io/2019/01/31/argument/">arguments &amp; etc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw IIFE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weridparts" scheme="http://mingguk.github.io/tags/weridparts/"/>
    
  </entry>
  
  <entry>
    <title>arguments &amp; etc</title>
    <link href="http://mingguk.github.io/2019/01/31/argument/"/>
    <id>http://mingguk.github.io/2019/01/31/argument/</id>
    <published>2019-01-31T13:25:15.000Z</published>
    <updated>2019-01-31T13:31:41.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Array-as-an-Object"><a href="#Array-as-an-Object" class="headerlink" title="Array as an Object"></a>Array as an Object</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Dynamic typing 때문에 서로 다른 타입 요소로 가질 수 있음</span><br><span class="line">var arr = [</span><br><span class="line">1, </span><br><span class="line">false, </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">       name: &apos;Tony&apos;,</span><br><span class="line">       address: &apos;111 Main St.&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">function(name) &#123;</span><br><span class="line">       var greeting = &apos;Hello &apos;;</span><br><span class="line">       console.log(greeting + name);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;hello&quot;;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">//객체, 함수도 요소로 받을 수 있어 바로 호출도 가능</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br><span class="line">arr[3](arr[2].name); // Hello Tony</span><br></pre></td></tr></table></figure><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p><img src="/images/jsw arg.png" alt=""></p><p>Execution context 가 생성될 때 variable environmnet, this, outer environment 외에 또 하나의 특별한 키워드가 생성 되는데 바로 <strong>arguments</strong> ,함수들에 넘긴 모든 인자들을 다 담은 객체이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function greet (firstname, lastname, language) &#123;</span><br><span class="line">// default 값 설정</span><br><span class="line">language = language || &apos;en&apos;;</span><br><span class="line"></span><br><span class="line">if (arguments.lenght === 0) &#123;</span><br><span class="line">        console.log(&apos;Missing parameters!&apos;);</span><br><span class="line">        console.log(&apos;--------------&apos;);</span><br><span class="line">        return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    console.log(firstname);</span><br><span class="line">    cosole.log(lastname);</span><br><span class="line">    console.log(language);</span><br><span class="line">    console.log(arguments) //유사배열,따로 선언안해도 사용가능</span><br><span class="line">    console.log(&apos;arg 0: &apos; + arguments[0]) //</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(); // 3개 다 undefined </span><br><span class="line">// 함수 선언 시 설정한 인자들을 다 넘길수 / 일부만 넘길수도 / 안넘길수도 있다</span><br><span class="line">greet(&apos;John&apos;); // John / undefined / undefined</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;); // John, Doe, undefined</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;); // John, Doe, es</span><br></pre></td></tr></table></figure><p>여기서 argumnets 는 <strong>유사배열</strong> 이다. 유사배열은 [] 숫자 key를 가지고, length 속성을 가지지만 실제배열의 메소드들은 사용할 수 없다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//Array.isArray() 로 유사배열여부 판단 가능</span><br><span class="line">var arr = [1,2,3];</span><br><span class="line">Array.isArray(arr); // true</span><br><span class="line"></span><br><span class="line">// 배열처럼 index 접근,length 속성 가짐</span><br><span class="line">function checkArg() &#123;</span><br><span class="line">    console.log(arguments);</span><br><span class="line">    console.log(arguments.length);</span><br><span class="line">    console.log(arguments[1]);</span><br><span class="line">&#125;</span><br><span class="line">checkArg(a,b,c); </span><br><span class="line"></span><br><span class="line">// Arguments [a,b,c ..]</span><br><span class="line">// 3</span><br><span class="line">// b</span><br><span class="line"></span><br><span class="line">// call, apply 를 사용 유사배열에 배열의 메소드를 차용할 수 있다. </span><br><span class="line">Array.prototype.slice.call(arguments,1,2);</span><br></pre></td></tr></table></figure><h3 id="Function-overloading"><a href="#Function-overloading" class="headerlink" title="Function overloading"></a>Function overloading</h3><p>다른 프로그래밍 언어들은 오버로딩 (같은 이름, 다른타입or 숫자의 인자를 가진 여러개의 함수 생성 가능) 을 지원한다. 자바스크립트는 오버로딩을 지원하진 않지만 <strong>1급함수</strong> 특성을 활용, 더 유연하게 구현이 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function greet(firstname, lastname, language) &#123;</span><br><span class="line">    language = language || &apos;en&apos;;</span><br><span class="line">    </span><br><span class="line">    if (language === &apos;en&apos;) &#123;</span><br><span class="line">        console.log(&apos;Hello &apos; + firstname + &apos; &apos; + lastname);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (language === &apos;es&apos;) &#123;</span><br><span class="line">        console.log(&apos;Hola &apos; + firstname + &apos; &apos; + lastname);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 만약 다른 인자를 받는 함수를 만들고 싶다면</span><br><span class="line">// 이런식으로 기존 함수를 활용, 오버로딩처럼 구현 가능</span><br><span class="line">function greetEnglish(firstname, lastname) &#123;</span><br><span class="line">    greet(firstname, lastname, &apos;en&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greetEnglish(firstname, lastname) &#123;</span><br><span class="line">    greet(firstname, lastname, &apos;en&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;en&apos;); // Hello John Doe</span><br><span class="line">greet(&apos;John&apos;, &apos;Doe&apos;, &apos;es&apos;); // Hola John Doe</span><br></pre></td></tr></table></figure><h3 id="세미콜론-꼭-입력해야될까"><a href="#세미콜론-꼭-입력해야될까" class="headerlink" title="세미콜론( ; ) 꼭 입력해야될까?"></a>세미콜론( ; ) 꼭 입력해야될까?</h3><p>자바스크립트 엔진은 작성한 코드를 한자 한자 syntax parser 를 통해 읽어 코드의 의도를 읽고 문법을 판단해서 코드를 실행시킨다. 이때 자바스크립트 엔진은 세미콜론이 필요하다고 판단되는 위치에 자동으로 추가해준다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getPerson() &#123;</span><br><span class="line">    return //자바스크립트 엔진에 의해 자동으로 ; 추가 됨</span><br><span class="line">    &#123;</span><br><span class="line">    firstname: &apos;Tony&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getPerson()); // undefined</span><br></pre></td></tr></table></figure><p>위의 코드 실행 결과를 객체 {firstname: ‘Tony’} 라고 의도했겠지만 실제 결과는 return 뒤에 ; 콜론이 필요하다는 자바스크립트 엔진의 판단으로 인해 빈값이 리턴되어 undefined 이다. </p><p>이런 의도치 않은 오류를 방지하기 위해 세미콜론은 <strong>명시적</strong>으로 입력하는 습관을 가지자.</p><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/02/01/IIFE/">IIFE</a></p><p><a href="http://mingguk.github.io/2019/01/31/jsw this/">this</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Array-as-an-Object&quot;&gt;&lt;a href=&quot;#Array-as-an-Object&quot; class=&quot;headerlink&quot; title=&quot;Array as an Object&quot;&gt;&lt;/a&gt;Array as an Object&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="http://mingguk.github.io/2019/01/31/jsw%20this/"/>
    <id>http://mingguk.github.io/2019/01/31/jsw this/</id>
    <published>2019-01-31T02:09:19.000Z</published>
    <updated>2019-01-31T12:53:54.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jswThis.png" alt=""></p><p>자바스크립트에서 함수가 실행될 때마다 새로운 Execution context를 생성하고 각 Execution context 는  variable Environmnet, Outer Environment 그리고 <strong>this</strong> 를 생성한다.                                                                                         this 는 함수의 위치, 호출되는 방식에 따라 특정 객체를 가르키게 된다.   </p><p><strong>5 cases of this</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 1. 전역 호출 시 - 전역객체</span><br><span class="line">console.log(this);  // Window &#123;...&#125;</span><br><span class="line"></span><br><span class="line">//2. 함수 내 일반 호출 시 - 전역객체</span><br><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    this.newVariable = &apos;hello&apos;;  //전역객체(Window) 에 새 함수 할당</span><br><span class="line">&#125;</span><br><span class="line">a(); // window &#123;...&#125;</span><br><span class="line">this.newVariable; // hello</span><br><span class="line"></span><br><span class="line">//3. 메소드(객체 내 함수) 호출 시 - 메소드 포함하는 객체</span><br><span class="line">var c = &#123;</span><br><span class="line">    name: &apos;The c object&apos;,</span><br><span class="line">    log: function() &#123;</span><br><span class="line">    this.name = &apos;Updated c object&apos;;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4. new keyword - 인스턴스(new 키워드로 생성한) 객체</span><br><span class="line">function person(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">var tom  = new Person(&apos;Tom&apos;);</span><br><span class="line"></span><br><span class="line">console.log(tom.name); // Tom</span><br><span class="line">console.log(name); // error!</span><br><span class="line"></span><br><span class="line">//5. .call , .apply - 각 함수 첫번째 인자 객체</span><br><span class="line">function speak() &#123;</span><br><span class="line">    var greeting = &apos;Hello i&apos;m + this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = &#123;</span><br><span class="line">name: &apos;tom&apos;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">speak.call(person); // tom</span><br><span class="line"></span><br><span class="line">c.log(); // c, Object &#123; name:&apos;Updated c object&apos;, log: function() &#123;console.log(this)&#125;&#125;</span><br><span class="line"></span><br><span class="line">console.log(newVariable); // hello</span><br><span class="line">a();  // Window</span><br></pre></td></tr></table></figure><p><strong>주의할 점 (메소드 내부함수에서 this 호출 시</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name: &apos;The C object&apos;;</span><br><span class="line">    log: function() &#123;</span><br><span class="line">        </span><br><span class="line">        this.name = &apos;Updated c object&apos;;</span><br><span class="line">        console.log(this);</span><br><span class="line">        </span><br><span class="line">        // 메소드의 내부함수의 this는 또 전역을 가르키는 오류 있음</span><br><span class="line">        var setname = function(newName) &#123;</span><br><span class="line">            this.name = newName;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        setName(&apos;Updated again! The c object&apos;);</span><br><span class="line">        console.log(this);ß</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br><span class="line">//오히려 전역객체 name 바뀜, 왜??</span><br><span class="line">window.name = &apos;Updated again! c object&apos;;</span><br><span class="line"></span><br><span class="line">//메소드의 this는 그 객체인데 변경이 안됐다? </span><br><span class="line">// Object &#123;name:&apos;Updated c object&apos;, log: function&#125;</span><br><span class="line">// Object &#123;name:&apos;Updated c object&apos;, log: function&#125;</span><br></pre></td></tr></table></figure><p>메소드의 this는 속해있는 객체를 가르키지만, 또 <strong>메소드 내부 함수는 전역객체를 가르키는 오류가 있다</strong>. 이를 방지하기 위해서는 this를 변수에 명시적으로 지정해주고 그 변수를 활용하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var c = &#123;</span><br><span class="line">    name: &apos;The C object&apos;;</span><br><span class="line">    log: function() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        </span><br><span class="line">        self.name = &apos;Updated c object&apos;;</span><br><span class="line">        console.log(this);</span><br><span class="line">        </span><br><span class="line">        // 메소드의 내부함수의 this는 또 전역을 가르키는 오류 있음</span><br><span class="line">        var setname = function(newName) &#123;</span><br><span class="line">            self.name = newName;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        setName(&apos;Updated again! The c object&apos;);</span><br><span class="line">        console.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">c.log(); // Object &#123;name: &apos;Updated again! The c object&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/31/argument/">arguments &amp; etc</a></p><p><a href="http://mingguk.github.io/2019/01/31/jsw call-by/">call By value &amp; referece</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jswThis.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트에서 함수가 실행될 때마다 새로운 Execution context를 생성하고 각 Execution context 는  variable Environmne
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>call by Value by Reference</title>
    <link href="http://mingguk.github.io/2019/01/31/jsw%20call-by/"/>
    <id>http://mingguk.github.io/2019/01/31/jsw call-by/</id>
    <published>2019-01-31T01:14:47.000Z</published>
    <updated>2019-01-30T16:58:20.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw CallBy.png" alt=""></p><h3 id="by-Value"><a href="#by-Value" class="headerlink" title="by Value"></a>by Value</h3><p><img src="/images/jsw byValue.png" alt=""></p><p>말 그대로 같은 <strong>‘Value, 값’</strong>만 복사하고 각기 <strong>다른 메모리공간</strong>에 저장</p><p>따라서 a 나 b 의 값을 바꾼다고 해도 서로의 <strong>값에 영향을 주지 않는다</strong></p><h3 id="by-Reference"><a href="#by-Reference" class="headerlink" title="by Reference"></a>by Reference</h3><p><img src="/images/jsw byRef.png" alt=""></p><p>메모리 상 해당 객체의 주소, reference를 복사하기 때문에 각기 다른 변수에 할당하더라도 모두 <strong>메모리상 같은 공간</strong>을 가르킨다.(해당 주소의 같은 메모리공간) 따라서 해당 객체를 변경하면 그에 연결된 <strong>모든 변수들이 영향을 받음</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//by Value (primitives)</span><br><span class="line">var a = 3;</span><br><span class="line">var b;</span><br><span class="line"></span><br><span class="line">b = a;</span><br><span class="line">a = 2;</span><br><span class="line"></span><br><span class="line">console.log(a);  // 2</span><br><span class="line">console.log(b); // 3</span><br><span class="line"></span><br><span class="line">//by Reference (Objects including functions)</span><br><span class="line">var c = &#123; greeting: &apos;hi&#125;;</span><br><span class="line">var d;</span><br><span class="line"></span><br><span class="line">// 객체이니 새로운 메모리 공간 할당x</span><br><span class="line">//c 가 가르키는 메모리상 같은 공간을 d도 가르키도록 함</span><br><span class="line">d = c; </span><br><span class="line"></span><br><span class="line">c.greeting = &apos;hello&apos;; // mutate</span><br><span class="line"></span><br><span class="line">// 같은 주소상 같은 객체를 변경했기 때문에 둘다 영향 받음</span><br><span class="line">console.log(c);   // Object &#123; greeting: &apos;hello&apos;&#125;</span><br><span class="line">console.log(d); // Object &#123; greeting: &apos;hello&apos;&#125;</span><br><span class="line"></span><br><span class="line">//by Reference (even as parameters)</span><br><span class="line">function changeGreeting(obj) &#123;</span><br><span class="line">    obj.greeting = &apos;Hola!&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line">console.log(c);    // Object &#123; greeting: &apos;Hola!&apos;&#125;</span><br></pre></td></tr></table></figure><p><strong>주의 할 점</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// = 연산자를 사용하면 새로운 메모리공간을 할당한다</span><br><span class="line">c = &#123;greeting: &apos;howdy&apos;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(c); // Object &#123; greeting: &apos;howdy&apos;&#125;</span><br><span class="line">console.log(d);   Object &#123; greeting: &apos;Hola!&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/31/jsw Functions/">Functions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw CallBy.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;by-Value&quot;&gt;&lt;a href=&quot;#by-Value&quot; class=&quot;headerlink&quot; title=&quot;by Value&quot;&gt;&lt;/a&gt;by Value&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Functions</title>
    <link href="http://mingguk.github.io/2019/01/31/jsw%20Functions/"/>
    <id>http://mingguk.github.io/2019/01/31/jsw Functions/</id>
    <published>2019-01-30T22:45:11.000Z</published>
    <updated>2019-01-30T17:14:32.683Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsw Function.png" alt=""></p><p>자바스크립트에서 function, 함수는 특별한 property를 가진 <strong>객체</strong>이다. </p><p><strong>name</strong> : Optional, 익명도 가능 작성한 코드의 Reference </p><p><strong>code</strong> : 작성한 코드, invocable() 이라는 작성한 코드를 실행시키는 특성을 가지고 있다.</p><p>이 두가지 property를 통해 자바스크립트에서 함수는 <strong>다른 변수나 객체가 하는 모든 역할들을 수행할 수 있다.</strong> (<strong>First Class Function, 1급 함수</strong>)  뒤에 나올 함수형 프로그래밍도 이 함수를 다른 함수의 인자로 넘길 수 있는 특성을 활용한 프로그래밍 기법의 일환이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br><span class="line">// 함수는 객체이기 때문에 . 연산자 사용이 가능하다</span><br><span class="line">greet.language = &apos;english&apos;;</span><br><span class="line"></span><br><span class="line">console.log(greet.language); //english</span><br></pre></td></tr></table></figure><p><br></p><p><img src="/images/jsw%20FO.png" alt=""></p><p>위와 같이 함수를 생성하면 다른 객체처럼 메모리에 저장되고 이 함수는 <strong>NAME 과 CODE</strong> 를 가지기 때문에 이 함수를 호출  greet() 하면 작성한 코드를 invocable() 통해 실행 하게 된다.</p><p>아래의 코드를 확인해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function log(a) &#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(&apos;a&apos;); // a</span><br><span class="line">log(3); // 3</span><br><span class="line">log(&#123;greeting:&apos;hi&apos;&#125;) // Object &#123;greeting: &apos;hi&apos;&#125;;</span><br><span class="line"></span><br><span class="line">// 함수가 객체이기에 인자로 넣을 수 있음</span><br><span class="line">log(function() &#123;</span><br><span class="line">    console.log(&apos;Hello&apos;);   // function() &#123;console.log(&apos;hi&apos;)&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>만약 코드 마지막 줄에 인자로 넣은 함수를 실행한 결과값을 얻고 싶다면?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// log 함수를 인자를 호출하는 식으로 변경</span><br><span class="line">function log(a) &#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(function() &#123;</span><br><span class="line">   console.log(&apos;hi&apos;);   // hi </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Function-statements-amp-Expressions"><a href="#Function-statements-amp-Expressions" class="headerlink" title="Function statements &amp; Expressions"></a>Function statements &amp; Expressions</h3><p>자바스크립트에서 <strong>expression</strong>란 특정 <strong>value</strong>를 리턴하는 코드를 말한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//expressions</span><br><span class="line">a = 3 // 3</span><br><span class="line">1 + 2; // 3</span><br><span class="line">a = &#123; greeting: &apos;hi&apos;&#125; // Object &#123;greeting: &apos;hi&apos;&#125;</span><br></pre></td></tr></table></figure><p>반면에 <strong>statement</strong> 란 리턴이 없는 코드를 의미한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//statement</span><br><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Anonymous Function</strong></p><p><img src="/images/jsw anonymous.png" alt=""></p><p>익명함수는 이름이 없는 함수를 의미한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// anonymous function, 이경우에는 익명함수가 Object를 반환</span><br><span class="line">// 변수에 할당하기에 expression 이라고 볼 수 있음</span><br><span class="line">var anonymousGreet = function() &#123;</span><br><span class="line">    console.log(&apos;hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 할당한 변수명 + () 통해 호출 할 수 있다</span><br><span class="line">anonymousGreet();</span><br></pre></td></tr></table></figure><p>아래코드의 실행결과를 살펴보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">greet();</span><br><span class="line"></span><br><span class="line">//Hoisting 에 의해 함수는 미리 메모리에 셋업되기 때문에 hi 출력 </span><br><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 변수에 할당 되었기에 현재 undefined </span><br><span class="line">anonymousGreet();</span><br><span class="line"></span><br><span class="line">var anonymousGreet = function() &#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// hi</span><br><span class="line">//uncaught type error, undefined is not a function...</span><br></pre></td></tr></table></figure><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/31/jsw call-by/">call By value &amp; referece</a></p><p><a href="http://mingguk.github.io/2019/01/31/jsw Object/">Object</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jsw Function.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;자바스크립트에서 function, 함수는 특별한 property를 가진 &lt;strong&gt;객체&lt;/strong&gt;이다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/s
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
  <entry>
    <title>Object</title>
    <link href="http://mingguk.github.io/2019/01/31/jsw%20Object/"/>
    <id>http://mingguk.github.io/2019/01/31/jsw Object/</id>
    <published>2019-01-30T16:34:53.000Z</published>
    <updated>2019-01-30T17:07:00.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jswOF.png" alt=""></p><h3 id="Object-in-javascript"><a href="#Object-in-javascript" class="headerlink" title="Object in javascript"></a>Object in javascript</h3><p><img src="/images/jswObject.png" alt=""></p><p>자바스크립트에서 객체는 <strong>a collection of key value pairs</strong>  이다.</p><p>객체의 요소로 변수, 함수(메소드), 심지어 다른 객체 까지 가질 수 있고 각각의 요소에 대한 reference(메모리 어디에 저장되어있는지, 주소) 를 가지고 있다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object();</span><br><span class="line"></span><br><span class="line">// [] 는 연산자, 해당 객체의 name 주소로 가서 value 를 반환하는</span><br><span class="line">person[&apos;firstname&apos;] = &apos;minkuk&apos;;  // name value pair</span><br><span class="line"></span><br><span class="line">// firstname 의 reference를 객체 person에게 부여</span><br><span class="line">person[&apos;lastname&apos;] = &apos;Seo&apos;;</span><br><span class="line"></span><br><span class="line">var firstNameProperty = &apos;firstname&apos;;</span><br><span class="line"></span><br><span class="line">console.log(person); //Object</span><br><span class="line">console.log(person[firstNameProperty]); //Tony</span><br><span class="line"></span><br><span class="line">// . 또한 연산자  a.name --&gt; a 객체의 name 의 value에 접근가능</span><br><span class="line">console.log(person.firstname); //Tony</span><br><span class="line"></span><br><span class="line">//객체 내 요소 추가하기</span><br><span class="line">person.address = new Object();</span><br><span class="line">person.address.street = &apos;111 Main St.&apos;;</span><br><span class="line">person.address.city = &apos;New York&apos;;</span><br><span class="line">person.address.state = &apos;NY&apos;;</span><br><span class="line"></span><br><span class="line">//. 연산자로 객체의 요소들에 접근, 참조가능</span><br><span class="line"></span><br><span class="line">console.log(person.address.street) // 111 Main St.</span><br><span class="line">console.log(person.address.city) // New York</span><br><span class="line">console.log(person[&apos;address&apos;][&apos;state&apos;]) // NY</span><br></pre></td></tr></table></figure><h3 id="Object-literals"><a href="#Object-literals" class="headerlink" title="Object literals"></a>Object literals</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;&#125;; // 객체 생성 </span><br><span class="line">var person = &#123;</span><br><span class="line">firstname: &apos;minkuk&apos;,</span><br><span class="line">    lastname: &apos;Seo&apos;</span><br><span class="line">    </span><br><span class="line">   //다른 객체도 객체의 요소로 생성가능</span><br><span class="line">   address: &#123;</span><br><span class="line">        street: &apos;111 Main St.&apos;,</span><br><span class="line">        city: &apos;New York&apos;,</span><br><span class="line">        state: &apos;NY&apos;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line">//객체는 함수의 인자로도 전달이 가능하다</span><br><span class="line">function greet(person) &#123;</span><br><span class="line">    console.log(&apos;Hi &apos; + person.firstname);</span><br><span class="line">&#125;</span><br><span class="line">greet(Tony); // Hi Tony</span><br><span class="line"></span><br><span class="line">// 이런식으로 객체생성과 동시에 인자로 넘기기도 가능</span><br><span class="line">greet(&#123;</span><br><span class="line">    firstname: &apos;Mary&apos;,</span><br><span class="line">    lastname: Doe</span><br><span class="line">&#125;); // Hi Mary Doe</span><br></pre></td></tr></table></figure><h3 id="NameSpace"><a href="#NameSpace" class="headerlink" title="NameSpace"></a>NameSpace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var greet = &apos;Hello!&apos;;</span><br><span class="line">var greet = &apos;Hola!&apos;;</span><br><span class="line"></span><br><span class="line">console.log(greet); </span><br><span class="line">// Hola!</span><br></pre></td></tr></table></figure><p>자바스크립트는 순차적으로 코드를 실행하기 때문에 위의 결과를 예측하기는 쉽다.</p><p>하지만 만약에 각 변수가 다른 자바스크립트에 저장되어 있거나, 외부에서 라이브러리로 가져다 쓰는거라면? 의도치 않게 같은 변수명으로 인해 충돌 가능성이 있다.</p><p><img src="/images/jswNameSpace.png" alt=""></p><p>이러한 충돌을 방지하기 위해 Namespace 개념이 발생했다. 자바스크립트에서는 객체를 이 네임스페이스로 활용 할 수 있다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var english = &#123;greet: &apos;Hello!&apos;&#125;;</span><br><span class="line">var spanish = &#123;greet: &apos;Hola!&apos;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(english.greet); //Hello!</span><br><span class="line">console.log(spanish.greet); //Hola!</span><br></pre></td></tr></table></figure><p><strong>객체 요소 추가 시 주의사항</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">english.greeting.greet = &apos;Hi!&apos;;  //이런 식은 error 발생</span><br><span class="line">//. 연산자의 우선순위에 따라 (연관 left-to-right)</span><br><span class="line">//english.greeting은 undefined가 이기 때문에</span><br><span class="line"></span><br><span class="line">// 객체 내 새로운 요소를 생성할 때는 [] 연산자를 사용하거나</span><br><span class="line">english[greeting][greet] = &apos;Hi!&apos;;</span><br><span class="line"></span><br><span class="line">// 객체 생성과 동시에 요소를 추가하는 것을 추천</span><br><span class="line">english = &#123;greeting: &#123;greet:&apos;Hi!&apos;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(english.greeting.greet); // Hi!</span><br></pre></td></tr></table></figure><hr><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><p><a href="http://mingguk.github.io/2019/01/31/jsw Functions/">Functions</a></p><p><a href="http://mingguk.github.io/2019/01/30/jsw type&amp;operator/">Type &amp; Operator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/jswOF.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Object-in-javascript&quot;&gt;&lt;a href=&quot;#Object-in-javascript&quot; class=&quot;headerlink&quot; title=&quot;Object i
      
    
    </summary>
    
      <category term="Front" scheme="http://mingguk.github.io/categories/Front/"/>
    
      <category term="Javascript" scheme="http://mingguk.github.io/categories/Front/Javascript/"/>
    
    
      <category term="javascript" scheme="http://mingguk.github.io/tags/javascript/"/>
    
      <category term="weirdparts" scheme="http://mingguk.github.io/tags/weirdparts/"/>
    
  </entry>
  
</feed>
